// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voiceproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "voiceproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VoiceProxyProtobuf {

namespace {

const ::google::protobuf::Descriptor* MusicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicRequest_MusicParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicRequest_MusicParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancedASROptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancedASROptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Word_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiometryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDataResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_voiceproxy_2eproto() {
  protobuf_AddDesc_voiceproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "voiceproxy.proto");
  GOOGLE_CHECK(file != NULL);
  MusicRequest_descriptor_ = file->message_type(0);
  static const int MusicRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest, musicproxyoptions_),
  };
  MusicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicRequest_descriptor_,
      MusicRequest::default_instance_,
      MusicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicRequest));
  MusicRequest_MusicParam_descriptor_ = MusicRequest_descriptor_->nested_type(0);
  static const int MusicRequest_MusicParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest_MusicParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest_MusicParam, value_),
  };
  MusicRequest_MusicParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicRequest_MusicParam_descriptor_,
      MusicRequest_MusicParam::default_instance_,
      MusicRequest_MusicParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest_MusicParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicRequest_MusicParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicRequest_MusicParam));
  AdvancedASROptions_descriptor_ = file->message_type(1);
  static const int AdvancedASROptions_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, partial_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, lattice_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, lattice_nbest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, utterance_silence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, allow_multi_utt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, chunk_process_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, cmn_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, cmn_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, capitalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, expected_num_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, grammar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, srgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, biometry_),
  };
  AdvancedASROptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvancedASROptions_descriptor_,
      AdvancedASROptions::default_instance_,
      AdvancedASROptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedASROptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvancedASROptions));
  ConnectionRequest_descriptor_ = file->message_type(2);
  static const int ConnectionRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, speechkitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, apikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, applicationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, punctuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, musicrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, disableantimatnormalizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, advancedasroptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, skipaudiofromlogging_),
  };
  ConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionRequest_descriptor_,
      ConnectionRequest::default_instance_,
      ConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionRequest));
  AddData_descriptor_ = file->message_type(3);
  static const int AddData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, audiodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, lastchunk_),
  };
  AddData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddData_descriptor_,
      AddData::default_instance_,
      AddData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddData));
  AlignInfo_descriptor_ = file->message_type(4);
  static const int AlignInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, acoustic_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, graph_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, lm_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, total_score_),
  };
  AlignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlignInfo_descriptor_,
      AlignInfo::default_instance_,
      AlignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlignInfo));
  Word_descriptor_ = file->message_type(5);
  static const int Word_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, align_info_),
  };
  Word_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Word_descriptor_,
      Word::default_instance_,
      Word_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Word));
  Result_descriptor_ = file->message_type(6);
  static const int Result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, normalized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, align_info_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  BiometryResult_descriptor_ = file->message_type(7);
  static const int BiometryResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometryResult, classname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometryResult, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometryResult, tag_),
  };
  BiometryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiometryResult_descriptor_,
      BiometryResult::default_instance_,
      BiometryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiometryResult));
  AddDataResponse_descriptor_ = file->message_type(8);
  static const int AddDataResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, recognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, endofutt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, messagescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, musicproxyresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, bioresult_),
  };
  AddDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDataResponse_descriptor_,
      AddDataResponse::default_instance_,
      AddDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDataResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_voiceproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicRequest_descriptor_, &MusicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicRequest_MusicParam_descriptor_, &MusicRequest_MusicParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvancedASROptions_descriptor_, &AdvancedASROptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionRequest_descriptor_, &ConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddData_descriptor_, &AddData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlignInfo_descriptor_, &AlignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Word_descriptor_, &Word::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiometryResult_descriptor_, &BiometryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDataResponse_descriptor_, &AddDataResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_voiceproxy_2eproto() {
  delete MusicRequest::default_instance_;
  delete MusicRequest_reflection_;
  delete MusicRequest_MusicParam::default_instance_;
  delete MusicRequest_MusicParam_reflection_;
  delete AdvancedASROptions::default_instance_;
  delete AdvancedASROptions_reflection_;
  delete ConnectionRequest::default_instance_;
  delete ConnectionRequest_reflection_;
  delete AddData::default_instance_;
  delete AddData_reflection_;
  delete AlignInfo::default_instance_;
  delete AlignInfo_reflection_;
  delete Word::default_instance_;
  delete Word_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete BiometryResult::default_instance_;
  delete BiometryResult_reflection_;
  delete AddDataResponse::default_instance_;
  delete AddDataResponse_reflection_;
}

void protobuf_AddDesc_voiceproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::BasicProtobuf::protobuf_AddDesc_basic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020voiceproxy.proto\022\022VoiceProxyProtobuf\032\013"
    "basic.proto\"\201\001\n\014MusicRequest\022F\n\021musicPro"
    "xyOptions\030\001 \003(\0132+.VoiceProxyProtobuf.Mus"
    "icRequest.MusicParam\032)\n\nMusicParam\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\371\002\n\022AdvancedASRO"
    "ptions\022\035\n\017partial_results\030\001 \001(\010:\004true\022\020\n"
    "\004beam\030\002 \001(\002:\002-1\022\030\n\014lattice_beam\030\003 \001(\002:\002-"
    "1\022\031\n\rlattice_nbest\030\004 \001(\005:\002-1\022\036\n\021utteranc"
    "e_silence\030\005 \001(\005:\003120\022\035\n\017allow_multi_utt\030"
    "\020 \001(\010:\004true\022 \n\023chunk_process_limit\030\021 \001(\005"
    ":\003100\022\027\n\ncmn_window\030\022 \001(\005:\003600\022\030\n\013cmn_la"
    "tency\030\023 \001(\005:\003150\022\031\n\ncapitalize\030\024 \001(\010:\005fa"
    "lse\022\035\n\022expected_num_count\030\025 \001(\005:\0010\022\017\n\007gr"
    "ammar\030\026 \003(\t\022\014\n\004srgs\030\027 \001(\t\022\020\n\010biometry\030\030 "
    "\001(\t\"\307\003\n\021ConnectionRequest\022\032\n\017protocolVer"
    "sion\030\001 \001(\005:\0011\022\030\n\020speechkitVersion\030\002 \002(\t\022"
    "\023\n\013serviceName\030\003 \002(\t\022\014\n\004uuid\030\004 \002(\t\022\016\n\006ap"
    "iKey\030\005 \002(\t\022\027\n\017applicationName\030\006 \002(\t\022\016\n\006d"
    "evice\030\007 \002(\t\022\016\n\006coords\030\010 \002(\t\022\r\n\005topic\030\t \002"
    "(\t\022\014\n\004lang\030\n \002(\t\022\016\n\006format\030\013 \002(\t\022\031\n\013punc"
    "tuation\030\014 \001(\010:\004true\0226\n\014musicRequest\030\021 \001("
    "\0132 .VoiceProxyProtobuf.MusicRequest\022\'\n\030d"
    "isableAntimatNormalizer\030\022 \001(\010:\005false\022B\n\022"
    "advancedASROptions\030\023 \001(\0132&.VoiceProxyPro"
    "tobuf.AdvancedASROptions\022#\n\024skipAudioFro"
    "mLogging\030\024 \001(\010:\005false\"/\n\007AddData\022\021\n\taudi"
    "oData\030\001 \001(\014\022\021\n\tlastChunk\030\002 \002(\010\"\205\001\n\tAlign"
    "Info\022\022\n\nstart_time\030\001 \001(\002\022\020\n\010end_time\030\002 \001"
    "(\002\022\026\n\016acoustic_score\030\003 \001(\002\022\023\n\013graph_scor"
    "e\030\004 \001(\002\022\020\n\010lm_score\030\005 \001(\002\022\023\n\013total_score"
    "\030\006 \001(\002\"\\\n\004Word\022\022\n\nconfidence\030\001 \002(\002\022\r\n\005va"
    "lue\030\002 \002(\t\0221\n\nalign_info\030\003 \001(\0132\035.VoicePro"
    "xyProtobuf.AlignInfo\"\214\001\n\006Result\022\022\n\nconfi"
    "dence\030\001 \002(\002\022\'\n\005words\030\002 \003(\0132\030.VoiceProxyP"
    "rotobuf.Word\022\022\n\nnormalized\030\003 \001(\t\0221\n\nalig"
    "n_info\030\004 \001(\0132\035.VoiceProxyProtobuf.AlignI"
    "nfo\"D\n\016BiometryResult\022\021\n\tclassname\030\001 \002(\t"
    "\022\022\n\nconfidence\030\002 \002(\002\022\013\n\003tag\030\003 \001(\t\"\216\002\n\017Ad"
    "dDataResponse\022D\n\014responseCode\030\001 \002(\0162..Ba"
    "sicProtobuf.ConnectionResponse.ResponseC"
    "ode\022/\n\013recognition\030\002 \003(\0132\032.VoiceProxyPro"
    "tobuf.Result\022\027\n\010endOfUtt\030\003 \001(\010:\005false\022\030\n"
    "\rmessagesCount\030\004 \001(\005:\0011\022\032\n\022musicProxyRes"
    "ponse\030\005 \001(\t\0225\n\tbioResult\030\006 \003(\0132\".VoicePr"
    "oxyProtobuf.BiometryResult", 1786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "voiceproxy.proto", &protobuf_RegisterTypes);
  MusicRequest::default_instance_ = new MusicRequest();
  MusicRequest_MusicParam::default_instance_ = new MusicRequest_MusicParam();
  AdvancedASROptions::default_instance_ = new AdvancedASROptions();
  ConnectionRequest::default_instance_ = new ConnectionRequest();
  AddData::default_instance_ = new AddData();
  AlignInfo::default_instance_ = new AlignInfo();
  Word::default_instance_ = new Word();
  Result::default_instance_ = new Result();
  BiometryResult::default_instance_ = new BiometryResult();
  AddDataResponse::default_instance_ = new AddDataResponse();
  MusicRequest::default_instance_->InitAsDefaultInstance();
  MusicRequest_MusicParam::default_instance_->InitAsDefaultInstance();
  AdvancedASROptions::default_instance_->InitAsDefaultInstance();
  ConnectionRequest::default_instance_->InitAsDefaultInstance();
  AddData::default_instance_->InitAsDefaultInstance();
  AlignInfo::default_instance_->InitAsDefaultInstance();
  Word::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  BiometryResult::default_instance_->InitAsDefaultInstance();
  AddDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_voiceproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_voiceproxy_2eproto {
  StaticDescriptorInitializer_voiceproxy_2eproto() {
    protobuf_AddDesc_voiceproxy_2eproto();
  }
} static_descriptor_initializer_voiceproxy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MusicRequest_MusicParam::kNameFieldNumber;
const int MusicRequest_MusicParam::kValueFieldNumber;
#endif  // !_MSC_VER

MusicRequest_MusicParam::MusicRequest_MusicParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.MusicRequest.MusicParam)
}

void MusicRequest_MusicParam::InitAsDefaultInstance() {
}

MusicRequest_MusicParam::MusicRequest_MusicParam(const MusicRequest_MusicParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.MusicRequest.MusicParam)
}

void MusicRequest_MusicParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicRequest_MusicParam::~MusicRequest_MusicParam() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.MusicRequest.MusicParam)
  SharedDtor();
}

void MusicRequest_MusicParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MusicRequest_MusicParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicRequest_MusicParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicRequest_MusicParam_descriptor_;
}

const MusicRequest_MusicParam& MusicRequest_MusicParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

MusicRequest_MusicParam* MusicRequest_MusicParam::default_instance_ = NULL;

MusicRequest_MusicParam* MusicRequest_MusicParam::New() const {
  return new MusicRequest_MusicParam;
}

void MusicRequest_MusicParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicRequest_MusicParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.MusicRequest.MusicParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.MusicRequest.MusicParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.MusicRequest.MusicParam)
  return false;
#undef DO_
}

void MusicRequest_MusicParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.MusicRequest.MusicParam)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.MusicRequest.MusicParam)
}

::google::protobuf::uint8* MusicRequest_MusicParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.MusicRequest.MusicParam)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.MusicRequest.MusicParam)
  return target;
}

int MusicRequest_MusicParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicRequest_MusicParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicRequest_MusicParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicRequest_MusicParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicRequest_MusicParam::MergeFrom(const MusicRequest_MusicParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicRequest_MusicParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicRequest_MusicParam::CopyFrom(const MusicRequest_MusicParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicRequest_MusicParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MusicRequest_MusicParam::Swap(MusicRequest_MusicParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicRequest_MusicParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicRequest_MusicParam_descriptor_;
  metadata.reflection = MusicRequest_MusicParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MusicRequest::kMusicProxyOptionsFieldNumber;
#endif  // !_MSC_VER

MusicRequest::MusicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.MusicRequest)
}

void MusicRequest::InitAsDefaultInstance() {
}

MusicRequest::MusicRequest(const MusicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.MusicRequest)
}

void MusicRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicRequest::~MusicRequest() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.MusicRequest)
  SharedDtor();
}

void MusicRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MusicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicRequest_descriptor_;
}

const MusicRequest& MusicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

MusicRequest* MusicRequest::default_instance_ = NULL;

MusicRequest* MusicRequest::New() const {
  return new MusicRequest;
}

void MusicRequest::Clear() {
  musicproxyoptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.MusicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
      case 1: {
        if (tag == 10) {
         parse_musicProxyOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_musicproxyoptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_musicProxyOptions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.MusicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.MusicRequest)
  return false;
#undef DO_
}

void MusicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.MusicRequest)
  // repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
  for (int i = 0; i < this->musicproxyoptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->musicproxyoptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.MusicRequest)
}

::google::protobuf::uint8* MusicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.MusicRequest)
  // repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
  for (int i = 0; i < this->musicproxyoptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->musicproxyoptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.MusicRequest)
  return target;
}

int MusicRequest::ByteSize() const {
  int total_size = 0;

  // repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
  total_size += 1 * this->musicproxyoptions_size();
  for (int i = 0; i < this->musicproxyoptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->musicproxyoptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicRequest::MergeFrom(const MusicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  musicproxyoptions_.MergeFrom(from.musicproxyoptions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicRequest::CopyFrom(const MusicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->musicproxyoptions())) return false;
  return true;
}

void MusicRequest::Swap(MusicRequest* other) {
  if (other != this) {
    musicproxyoptions_.Swap(&other->musicproxyoptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicRequest_descriptor_;
  metadata.reflection = MusicRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvancedASROptions::kPartialResultsFieldNumber;
const int AdvancedASROptions::kBeamFieldNumber;
const int AdvancedASROptions::kLatticeBeamFieldNumber;
const int AdvancedASROptions::kLatticeNbestFieldNumber;
const int AdvancedASROptions::kUtteranceSilenceFieldNumber;
const int AdvancedASROptions::kAllowMultiUttFieldNumber;
const int AdvancedASROptions::kChunkProcessLimitFieldNumber;
const int AdvancedASROptions::kCmnWindowFieldNumber;
const int AdvancedASROptions::kCmnLatencyFieldNumber;
const int AdvancedASROptions::kCapitalizeFieldNumber;
const int AdvancedASROptions::kExpectedNumCountFieldNumber;
const int AdvancedASROptions::kGrammarFieldNumber;
const int AdvancedASROptions::kSrgsFieldNumber;
const int AdvancedASROptions::kBiometryFieldNumber;
#endif  // !_MSC_VER

AdvancedASROptions::AdvancedASROptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AdvancedASROptions)
}

void AdvancedASROptions::InitAsDefaultInstance() {
}

AdvancedASROptions::AdvancedASROptions(const AdvancedASROptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AdvancedASROptions)
}

void AdvancedASROptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partial_results_ = true;
  beam_ = -1;
  lattice_beam_ = -1;
  lattice_nbest_ = -1;
  utterance_silence_ = 120;
  allow_multi_utt_ = true;
  chunk_process_limit_ = 100;
  cmn_window_ = 600;
  cmn_latency_ = 150;
  capitalize_ = false;
  expected_num_count_ = 0;
  srgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  biometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvancedASROptions::~AdvancedASROptions() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AdvancedASROptions)
  SharedDtor();
}

void AdvancedASROptions::SharedDtor() {
  if (srgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srgs_;
  }
  if (biometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete biometry_;
  }
  if (this != default_instance_) {
  }
}

void AdvancedASROptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancedASROptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancedASROptions_descriptor_;
}

const AdvancedASROptions& AdvancedASROptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AdvancedASROptions* AdvancedASROptions::default_instance_ = NULL;

AdvancedASROptions* AdvancedASROptions::New() const {
  return new AdvancedASROptions;
}

void AdvancedASROptions::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    partial_results_ = true;
    beam_ = -1;
    lattice_beam_ = -1;
    lattice_nbest_ = -1;
    utterance_silence_ = 120;
    allow_multi_utt_ = true;
    chunk_process_limit_ = 100;
    cmn_window_ = 600;
  }
  if (_has_bits_[8 / 32] & 14080) {
    cmn_latency_ = 150;
    capitalize_ = false;
    expected_num_count_ = 0;
    if (has_srgs()) {
      if (srgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        srgs_->clear();
      }
    }
    if (has_biometry()) {
      if (biometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        biometry_->clear();
      }
    }
  }
  grammar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvancedASROptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AdvancedASROptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool partial_results = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partial_results_)));
          set_has_partial_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_beam;
        break;
      }

      // optional float beam = 2 [default = -1];
      case 2: {
        if (tag == 21) {
         parse_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_)));
          set_has_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lattice_beam;
        break;
      }

      // optional float lattice_beam = 3 [default = -1];
      case 3: {
        if (tag == 29) {
         parse_lattice_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lattice_beam_)));
          set_has_lattice_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lattice_nbest;
        break;
      }

      // optional int32 lattice_nbest = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_lattice_nbest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lattice_nbest_)));
          set_has_lattice_nbest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_utterance_silence;
        break;
      }

      // optional int32 utterance_silence = 5 [default = 120];
      case 5: {
        if (tag == 40) {
         parse_utterance_silence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utterance_silence_)));
          set_has_utterance_silence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_allow_multi_utt;
        break;
      }

      // optional bool allow_multi_utt = 16 [default = true];
      case 16: {
        if (tag == 128) {
         parse_allow_multi_utt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_multi_utt_)));
          set_has_allow_multi_utt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_chunk_process_limit;
        break;
      }

      // optional int32 chunk_process_limit = 17 [default = 100];
      case 17: {
        if (tag == 136) {
         parse_chunk_process_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_process_limit_)));
          set_has_chunk_process_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_cmn_window;
        break;
      }

      // optional int32 cmn_window = 18 [default = 600];
      case 18: {
        if (tag == 144) {
         parse_cmn_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmn_window_)));
          set_has_cmn_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cmn_latency;
        break;
      }

      // optional int32 cmn_latency = 19 [default = 150];
      case 19: {
        if (tag == 152) {
         parse_cmn_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmn_latency_)));
          set_has_cmn_latency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_capitalize;
        break;
      }

      // optional bool capitalize = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_capitalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capitalize_)));
          set_has_capitalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_expected_num_count;
        break;
      }

      // optional int32 expected_num_count = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_expected_num_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_num_count_)));
          set_has_expected_num_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_grammar;
        break;
      }

      // repeated string grammar = 22;
      case 22: {
        if (tag == 178) {
         parse_grammar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_grammar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grammar(this->grammar_size() - 1).data(),
            this->grammar(this->grammar_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grammar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_grammar;
        if (input->ExpectTag(186)) goto parse_srgs;
        break;
      }

      // optional string srgs = 23;
      case 23: {
        if (tag == 186) {
         parse_srgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srgs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srgs().data(), this->srgs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "srgs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_biometry;
        break;
      }

      // optional string biometry = 24;
      case 24: {
        if (tag == 194) {
         parse_biometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biometry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->biometry().data(), this->biometry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "biometry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AdvancedASROptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AdvancedASROptions)
  return false;
#undef DO_
}

void AdvancedASROptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AdvancedASROptions)
  // optional bool partial_results = 1 [default = true];
  if (has_partial_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->partial_results(), output);
  }

  // optional float beam = 2 [default = -1];
  if (has_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beam(), output);
  }

  // optional float lattice_beam = 3 [default = -1];
  if (has_lattice_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lattice_beam(), output);
  }

  // optional int32 lattice_nbest = 4 [default = -1];
  if (has_lattice_nbest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lattice_nbest(), output);
  }

  // optional int32 utterance_silence = 5 [default = 120];
  if (has_utterance_silence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->utterance_silence(), output);
  }

  // optional bool allow_multi_utt = 16 [default = true];
  if (has_allow_multi_utt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->allow_multi_utt(), output);
  }

  // optional int32 chunk_process_limit = 17 [default = 100];
  if (has_chunk_process_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->chunk_process_limit(), output);
  }

  // optional int32 cmn_window = 18 [default = 600];
  if (has_cmn_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cmn_window(), output);
  }

  // optional int32 cmn_latency = 19 [default = 150];
  if (has_cmn_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cmn_latency(), output);
  }

  // optional bool capitalize = 20 [default = false];
  if (has_capitalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->capitalize(), output);
  }

  // optional int32 expected_num_count = 21 [default = 0];
  if (has_expected_num_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->expected_num_count(), output);
  }

  // repeated string grammar = 22;
  for (int i = 0; i < this->grammar_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->grammar(i).data(), this->grammar(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "grammar");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->grammar(i), output);
  }

  // optional string srgs = 23;
  if (has_srgs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srgs().data(), this->srgs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srgs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->srgs(), output);
  }

  // optional string biometry = 24;
  if (has_biometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->biometry().data(), this->biometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "biometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->biometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AdvancedASROptions)
}

::google::protobuf::uint8* AdvancedASROptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AdvancedASROptions)
  // optional bool partial_results = 1 [default = true];
  if (has_partial_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->partial_results(), target);
  }

  // optional float beam = 2 [default = -1];
  if (has_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beam(), target);
  }

  // optional float lattice_beam = 3 [default = -1];
  if (has_lattice_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lattice_beam(), target);
  }

  // optional int32 lattice_nbest = 4 [default = -1];
  if (has_lattice_nbest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lattice_nbest(), target);
  }

  // optional int32 utterance_silence = 5 [default = 120];
  if (has_utterance_silence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->utterance_silence(), target);
  }

  // optional bool allow_multi_utt = 16 [default = true];
  if (has_allow_multi_utt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->allow_multi_utt(), target);
  }

  // optional int32 chunk_process_limit = 17 [default = 100];
  if (has_chunk_process_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->chunk_process_limit(), target);
  }

  // optional int32 cmn_window = 18 [default = 600];
  if (has_cmn_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cmn_window(), target);
  }

  // optional int32 cmn_latency = 19 [default = 150];
  if (has_cmn_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cmn_latency(), target);
  }

  // optional bool capitalize = 20 [default = false];
  if (has_capitalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->capitalize(), target);
  }

  // optional int32 expected_num_count = 21 [default = 0];
  if (has_expected_num_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->expected_num_count(), target);
  }

  // repeated string grammar = 22;
  for (int i = 0; i < this->grammar_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grammar(i).data(), this->grammar(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grammar");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->grammar(i), target);
  }

  // optional string srgs = 23;
  if (has_srgs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srgs().data(), this->srgs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srgs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->srgs(), target);
  }

  // optional string biometry = 24;
  if (has_biometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->biometry().data(), this->biometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "biometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->biometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AdvancedASROptions)
  return target;
}

int AdvancedASROptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool partial_results = 1 [default = true];
    if (has_partial_results()) {
      total_size += 1 + 1;
    }

    // optional float beam = 2 [default = -1];
    if (has_beam()) {
      total_size += 1 + 4;
    }

    // optional float lattice_beam = 3 [default = -1];
    if (has_lattice_beam()) {
      total_size += 1 + 4;
    }

    // optional int32 lattice_nbest = 4 [default = -1];
    if (has_lattice_nbest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lattice_nbest());
    }

    // optional int32 utterance_silence = 5 [default = 120];
    if (has_utterance_silence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utterance_silence());
    }

    // optional bool allow_multi_utt = 16 [default = true];
    if (has_allow_multi_utt()) {
      total_size += 2 + 1;
    }

    // optional int32 chunk_process_limit = 17 [default = 100];
    if (has_chunk_process_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_process_limit());
    }

    // optional int32 cmn_window = 18 [default = 600];
    if (has_cmn_window()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmn_window());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cmn_latency = 19 [default = 150];
    if (has_cmn_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmn_latency());
    }

    // optional bool capitalize = 20 [default = false];
    if (has_capitalize()) {
      total_size += 2 + 1;
    }

    // optional int32 expected_num_count = 21 [default = 0];
    if (has_expected_num_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected_num_count());
    }

    // optional string srgs = 23;
    if (has_srgs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srgs());
    }

    // optional string biometry = 24;
    if (has_biometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->biometry());
    }

  }
  // repeated string grammar = 22;
  total_size += 2 * this->grammar_size();
  for (int i = 0; i < this->grammar_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->grammar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancedASROptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvancedASROptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvancedASROptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvancedASROptions::MergeFrom(const AdvancedASROptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  grammar_.MergeFrom(from.grammar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partial_results()) {
      set_partial_results(from.partial_results());
    }
    if (from.has_beam()) {
      set_beam(from.beam());
    }
    if (from.has_lattice_beam()) {
      set_lattice_beam(from.lattice_beam());
    }
    if (from.has_lattice_nbest()) {
      set_lattice_nbest(from.lattice_nbest());
    }
    if (from.has_utterance_silence()) {
      set_utterance_silence(from.utterance_silence());
    }
    if (from.has_allow_multi_utt()) {
      set_allow_multi_utt(from.allow_multi_utt());
    }
    if (from.has_chunk_process_limit()) {
      set_chunk_process_limit(from.chunk_process_limit());
    }
    if (from.has_cmn_window()) {
      set_cmn_window(from.cmn_window());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmn_latency()) {
      set_cmn_latency(from.cmn_latency());
    }
    if (from.has_capitalize()) {
      set_capitalize(from.capitalize());
    }
    if (from.has_expected_num_count()) {
      set_expected_num_count(from.expected_num_count());
    }
    if (from.has_srgs()) {
      set_srgs(from.srgs());
    }
    if (from.has_biometry()) {
      set_biometry(from.biometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvancedASROptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedASROptions::CopyFrom(const AdvancedASROptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedASROptions::IsInitialized() const {

  return true;
}

void AdvancedASROptions::Swap(AdvancedASROptions* other) {
  if (other != this) {
    std::swap(partial_results_, other->partial_results_);
    std::swap(beam_, other->beam_);
    std::swap(lattice_beam_, other->lattice_beam_);
    std::swap(lattice_nbest_, other->lattice_nbest_);
    std::swap(utterance_silence_, other->utterance_silence_);
    std::swap(allow_multi_utt_, other->allow_multi_utt_);
    std::swap(chunk_process_limit_, other->chunk_process_limit_);
    std::swap(cmn_window_, other->cmn_window_);
    std::swap(cmn_latency_, other->cmn_latency_);
    std::swap(capitalize_, other->capitalize_);
    std::swap(expected_num_count_, other->expected_num_count_);
    grammar_.Swap(&other->grammar_);
    std::swap(srgs_, other->srgs_);
    std::swap(biometry_, other->biometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvancedASROptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancedASROptions_descriptor_;
  metadata.reflection = AdvancedASROptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionRequest::kProtocolVersionFieldNumber;
const int ConnectionRequest::kSpeechkitVersionFieldNumber;
const int ConnectionRequest::kServiceNameFieldNumber;
const int ConnectionRequest::kUuidFieldNumber;
const int ConnectionRequest::kApiKeyFieldNumber;
const int ConnectionRequest::kApplicationNameFieldNumber;
const int ConnectionRequest::kDeviceFieldNumber;
const int ConnectionRequest::kCoordsFieldNumber;
const int ConnectionRequest::kTopicFieldNumber;
const int ConnectionRequest::kLangFieldNumber;
const int ConnectionRequest::kFormatFieldNumber;
const int ConnectionRequest::kPunctuationFieldNumber;
const int ConnectionRequest::kMusicRequestFieldNumber;
const int ConnectionRequest::kDisableAntimatNormalizerFieldNumber;
const int ConnectionRequest::kAdvancedASROptionsFieldNumber;
const int ConnectionRequest::kSkipAudioFromLoggingFieldNumber;
#endif  // !_MSC_VER

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.ConnectionRequest)
}

void ConnectionRequest::InitAsDefaultInstance() {
  musicrequest_ = const_cast< ::VoiceProxyProtobuf::MusicRequest*>(&::VoiceProxyProtobuf::MusicRequest::default_instance());
  advancedasroptions_ = const_cast< ::VoiceProxyProtobuf::AdvancedASROptions*>(&::VoiceProxyProtobuf::AdvancedASROptions::default_instance());
}

ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolversion_ = 1;
  speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  punctuation_ = true;
  musicrequest_ = NULL;
  disableantimatnormalizer_ = false;
  advancedasroptions_ = NULL;
  skipaudiofromlogging_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.ConnectionRequest)
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete speechkitversion_;
  }
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicename_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apikey_;
  }
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applicationname_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coords_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (this != default_instance_) {
    delete musicrequest_;
    delete advancedasroptions_;
  }
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequest_descriptor_;
}

const ConnectionRequest& ConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

ConnectionRequest* ConnectionRequest::default_instance_ = NULL;

ConnectionRequest* ConnectionRequest::New() const {
  return new ConnectionRequest;
}

void ConnectionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConnectionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    protocolversion_ = 1;
    if (has_speechkitversion()) {
      if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        speechkitversion_->clear();
      }
    }
    if (has_servicename()) {
      if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicename_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_apikey()) {
      if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apikey_->clear();
      }
    }
    if (has_applicationname()) {
      if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        applicationname_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_coords()) {
      if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        coords_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(disableantimatnormalizer_, skipaudiofromlogging_);
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    punctuation_ = true;
    if (has_musicrequest()) {
      if (musicrequest_ != NULL) musicrequest_->::VoiceProxyProtobuf::MusicRequest::Clear();
    }
    if (has_advancedasroptions()) {
      if (advancedasroptions_ != NULL) advancedasroptions_->::VoiceProxyProtobuf::AdvancedASROptions::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.ConnectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocolVersion = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speechkitVersion;
        break;
      }

      // required string speechkitVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_speechkitVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechkitversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speechkitversion().data(), this->speechkitversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speechkitversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceName;
        break;
      }

      // required string serviceName = 3;
      case 3: {
        if (tag == 26) {
         parse_serviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // required string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_apiKey;
        break;
      }

      // required string apiKey = 5;
      case 5: {
        if (tag == 42) {
         parse_apiKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apikey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apikey().data(), this->apikey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apikey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_applicationName;
        break;
      }

      // required string applicationName = 6;
      case 6: {
        if (tag == 50) {
         parse_applicationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applicationname().data(), this->applicationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "applicationname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // required string device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_coords;
        break;
      }

      // required string coords = 8;
      case 8: {
        if (tag == 66) {
         parse_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coords().data(), this->coords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "coords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_topic;
        break;
      }

      // required string topic = 9;
      case 9: {
        if (tag == 74) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lang;
        break;
      }

      // required string lang = 10;
      case 10: {
        if (tag == 82) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_format;
        break;
      }

      // required string format = 11;
      case 11: {
        if (tag == 90) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_punctuation;
        break;
      }

      // optional bool punctuation = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_punctuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &punctuation_)));
          set_has_punctuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_musicRequest;
        break;
      }

      // optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
      case 17: {
        if (tag == 138) {
         parse_musicRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_musicrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_disableAntimatNormalizer;
        break;
      }

      // optional bool disableAntimatNormalizer = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_disableAntimatNormalizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disableantimatnormalizer_)));
          set_has_disableantimatnormalizer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_advancedASROptions;
        break;
      }

      // optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
      case 19: {
        if (tag == 154) {
         parse_advancedASROptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advancedasroptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_skipAudioFromLogging;
        break;
      }

      // optional bool skipAudioFromLogging = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_skipAudioFromLogging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipaudiofromlogging_)));
          set_has_skipaudiofromlogging();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.ConnectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.ConnectionRequest)
  return false;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speechkitversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->speechkitversion(), output);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servicename(), output);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apikey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->apikey(), output);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applicationname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->applicationname(), output);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->coords(), output);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic(), output);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->lang(), output);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->format(), output);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->punctuation(), output);
  }

  // optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
  if (has_musicrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->musicrequest(), output);
  }

  // optional bool disableAntimatNormalizer = 18 [default = false];
  if (has_disableantimatnormalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->disableantimatnormalizer(), output);
  }

  // optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
  if (has_advancedasroptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->advancedasroptions(), output);
  }

  // optional bool skipAudioFromLogging = 20 [default = false];
  if (has_skipaudiofromlogging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->skipaudiofromlogging(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.ConnectionRequest)
}

::google::protobuf::uint8* ConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speechkitversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->speechkitversion(), target);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servicename(), target);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apikey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->apikey(), target);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applicationname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->applicationname(), target);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->coords(), target);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic(), target);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lang(), target);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->format(), target);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->punctuation(), target);
  }

  // optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
  if (has_musicrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->musicrequest(), target);
  }

  // optional bool disableAntimatNormalizer = 18 [default = false];
  if (has_disableantimatnormalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->disableantimatnormalizer(), target);
  }

  // optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
  if (has_advancedasroptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->advancedasroptions(), target);
  }

  // optional bool skipAudioFromLogging = 20 [default = false];
  if (has_skipaudiofromlogging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->skipaudiofromlogging(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.ConnectionRequest)
  return target;
}

int ConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 protocolVersion = 1 [default = 1];
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // required string speechkitVersion = 2;
    if (has_speechkitversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechkitversion());
    }

    // required string serviceName = 3;
    if (has_servicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicename());
    }

    // required string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string apiKey = 5;
    if (has_apikey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apikey());
    }

    // required string applicationName = 6;
    if (has_applicationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationname());
    }

    // required string device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // required string coords = 8;
    if (has_coords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coords());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string topic = 9;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // required string lang = 10;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // required string format = 11;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional bool punctuation = 12 [default = true];
    if (has_punctuation()) {
      total_size += 1 + 1;
    }

    // optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
    if (has_musicrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->musicrequest());
    }

    // optional bool disableAntimatNormalizer = 18 [default = false];
    if (has_disableantimatnormalizer()) {
      total_size += 2 + 1;
    }

    // optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
    if (has_advancedasroptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advancedasroptions());
    }

    // optional bool skipAudioFromLogging = 20 [default = false];
    if (has_skipaudiofromlogging()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_speechkitversion()) {
      set_speechkitversion(from.speechkitversion());
    }
    if (from.has_servicename()) {
      set_servicename(from.servicename());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_apikey()) {
      set_apikey(from.apikey());
    }
    if (from.has_applicationname()) {
      set_applicationname(from.applicationname());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_coords()) {
      set_coords(from.coords());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_punctuation()) {
      set_punctuation(from.punctuation());
    }
    if (from.has_musicrequest()) {
      mutable_musicrequest()->::VoiceProxyProtobuf::MusicRequest::MergeFrom(from.musicrequest());
    }
    if (from.has_disableantimatnormalizer()) {
      set_disableantimatnormalizer(from.disableantimatnormalizer());
    }
    if (from.has_advancedasroptions()) {
      mutable_advancedasroptions()->::VoiceProxyProtobuf::AdvancedASROptions::MergeFrom(from.advancedasroptions());
    }
    if (from.has_skipaudiofromlogging()) {
      set_skipaudiofromlogging(from.skipaudiofromlogging());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fe) != 0x000007fe) return false;

  if (has_musicrequest()) {
    if (!this->musicrequest().IsInitialized()) return false;
  }
  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(speechkitversion_, other->speechkitversion_);
    std::swap(servicename_, other->servicename_);
    std::swap(uuid_, other->uuid_);
    std::swap(apikey_, other->apikey_);
    std::swap(applicationname_, other->applicationname_);
    std::swap(device_, other->device_);
    std::swap(coords_, other->coords_);
    std::swap(topic_, other->topic_);
    std::swap(lang_, other->lang_);
    std::swap(format_, other->format_);
    std::swap(punctuation_, other->punctuation_);
    std::swap(musicrequest_, other->musicrequest_);
    std::swap(disableantimatnormalizer_, other->disableantimatnormalizer_);
    std::swap(advancedasroptions_, other->advancedasroptions_);
    std::swap(skipaudiofromlogging_, other->skipaudiofromlogging_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequest_descriptor_;
  metadata.reflection = ConnectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddData::kAudioDataFieldNumber;
const int AddData::kLastChunkFieldNumber;
#endif  // !_MSC_VER

AddData::AddData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AddData)
}

void AddData::InitAsDefaultInstance() {
}

AddData::AddData(const AddData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AddData)
}

void AddData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  audiodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastchunk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddData::~AddData() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AddData)
  SharedDtor();
}

void AddData::SharedDtor() {
  if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audiodata_;
  }
  if (this != default_instance_) {
  }
}

void AddData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddData_descriptor_;
}

const AddData& AddData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AddData* AddData::default_instance_ = NULL;

AddData* AddData::New() const {
  return new AddData;
}

void AddData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_audiodata()) {
      if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audiodata_->clear();
      }
    }
    lastchunk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AddData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audioData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audiodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastChunk;
        break;
      }

      // required bool lastChunk = 2;
      case 2: {
        if (tag == 16) {
         parse_lastChunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastchunk_)));
          set_has_lastchunk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AddData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AddData)
  return false;
#undef DO_
}

void AddData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AddData)
  // optional bytes audioData = 1;
  if (has_audiodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audiodata(), output);
  }

  // required bool lastChunk = 2;
  if (has_lastchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lastchunk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AddData)
}

::google::protobuf::uint8* AddData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AddData)
  // optional bytes audioData = 1;
  if (has_audiodata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audiodata(), target);
  }

  // required bool lastChunk = 2;
  if (has_lastchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lastchunk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AddData)
  return target;
}

int AddData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes audioData = 1;
    if (has_audiodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audiodata());
    }

    // required bool lastChunk = 2;
    if (has_lastchunk()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddData::MergeFrom(const AddData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiodata()) {
      set_audiodata(from.audiodata());
    }
    if (from.has_lastchunk()) {
      set_lastchunk(from.lastchunk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddData::CopyFrom(const AddData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void AddData::Swap(AddData* other) {
  if (other != this) {
    std::swap(audiodata_, other->audiodata_);
    std::swap(lastchunk_, other->lastchunk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddData_descriptor_;
  metadata.reflection = AddData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlignInfo::kStartTimeFieldNumber;
const int AlignInfo::kEndTimeFieldNumber;
const int AlignInfo::kAcousticScoreFieldNumber;
const int AlignInfo::kGraphScoreFieldNumber;
const int AlignInfo::kLmScoreFieldNumber;
const int AlignInfo::kTotalScoreFieldNumber;
#endif  // !_MSC_VER

AlignInfo::AlignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AlignInfo)
}

void AlignInfo::InitAsDefaultInstance() {
}

AlignInfo::AlignInfo(const AlignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AlignInfo)
}

void AlignInfo::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  acoustic_score_ = 0;
  graph_score_ = 0;
  lm_score_ = 0;
  total_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlignInfo::~AlignInfo() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AlignInfo)
  SharedDtor();
}

void AlignInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlignInfo_descriptor_;
}

const AlignInfo& AlignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AlignInfo* AlignInfo::default_instance_ = NULL;

AlignInfo* AlignInfo::New() const {
  return new AlignInfo;
}

void AlignInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AlignInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(start_time_, total_score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AlignInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_end_time;
        break;
      }

      // optional float end_time = 2;
      case 2: {
        if (tag == 21) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_acoustic_score;
        break;
      }

      // optional float acoustic_score = 3;
      case 3: {
        if (tag == 29) {
         parse_acoustic_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acoustic_score_)));
          set_has_acoustic_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_graph_score;
        break;
      }

      // optional float graph_score = 4;
      case 4: {
        if (tag == 37) {
         parse_graph_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &graph_score_)));
          set_has_graph_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_lm_score;
        break;
      }

      // optional float lm_score = 5;
      case 5: {
        if (tag == 45) {
         parse_lm_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lm_score_)));
          set_has_lm_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_total_score;
        break;
      }

      // optional float total_score = 6;
      case 6: {
        if (tag == 53) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AlignInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AlignInfo)
  return false;
#undef DO_
}

void AlignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AlignInfo)
  // optional float start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_time(), output);
  }

  // optional float end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  // optional float acoustic_score = 3;
  if (has_acoustic_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acoustic_score(), output);
  }

  // optional float graph_score = 4;
  if (has_graph_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->graph_score(), output);
  }

  // optional float lm_score = 5;
  if (has_lm_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lm_score(), output);
  }

  // optional float total_score = 6;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->total_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AlignInfo)
}

::google::protobuf::uint8* AlignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AlignInfo)
  // optional float start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_time(), target);
  }

  // optional float end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  // optional float acoustic_score = 3;
  if (has_acoustic_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acoustic_score(), target);
  }

  // optional float graph_score = 4;
  if (has_graph_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->graph_score(), target);
  }

  // optional float lm_score = 5;
  if (has_lm_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lm_score(), target);
  }

  // optional float total_score = 6;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->total_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AlignInfo)
  return target;
}

int AlignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

    // optional float acoustic_score = 3;
    if (has_acoustic_score()) {
      total_size += 1 + 4;
    }

    // optional float graph_score = 4;
    if (has_graph_score()) {
      total_size += 1 + 4;
    }

    // optional float lm_score = 5;
    if (has_lm_score()) {
      total_size += 1 + 4;
    }

    // optional float total_score = 6;
    if (has_total_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlignInfo::MergeFrom(const AlignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_acoustic_score()) {
      set_acoustic_score(from.acoustic_score());
    }
    if (from.has_graph_score()) {
      set_graph_score(from.graph_score());
    }
    if (from.has_lm_score()) {
      set_lm_score(from.lm_score());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignInfo::CopyFrom(const AlignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignInfo::IsInitialized() const {

  return true;
}

void AlignInfo::Swap(AlignInfo* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(acoustic_score_, other->acoustic_score_);
    std::swap(graph_score_, other->graph_score_);
    std::swap(lm_score_, other->lm_score_);
    std::swap(total_score_, other->total_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlignInfo_descriptor_;
  metadata.reflection = AlignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Word::kConfidenceFieldNumber;
const int Word::kValueFieldNumber;
const int Word::kAlignInfoFieldNumber;
#endif  // !_MSC_VER

Word::Word()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.Word)
}

void Word::InitAsDefaultInstance() {
  align_info_ = const_cast< ::VoiceProxyProtobuf::AlignInfo*>(&::VoiceProxyProtobuf::AlignInfo::default_instance());
}

Word::Word(const Word& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.Word)
}

void Word::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  align_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.Word)
  SharedDtor();
}

void Word::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
    delete align_info_;
  }
}

void Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Word_descriptor_;
}

const Word& Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

Word* Word::default_instance_ = NULL;

Word* Word::New() const {
  return new Word;
}

void Word::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    confidence_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_align_info()) {
      if (align_info_ != NULL) align_info_->::VoiceProxyProtobuf::AlignInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_align_info;
        break;
      }

      // optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
      case 3: {
        if (tag == 26) {
         parse_align_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_align_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.Word)
  return false;
#undef DO_
}

void Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.Word)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
  if (has_align_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->align_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.Word)
}

::google::protobuf::uint8* Word::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.Word)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
  if (has_align_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->align_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.Word)
  return target;
}

int Word::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float confidence = 1;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
    if (has_align_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->align_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Word::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Word* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Word*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_align_info()) {
      mutable_align_info()->::VoiceProxyProtobuf::AlignInfo::MergeFrom(from.align_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Word::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Word::Swap(Word* other) {
  if (other != this) {
    std::swap(confidence_, other->confidence_);
    std::swap(value_, other->value_);
    std::swap(align_info_, other->align_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Word_descriptor_;
  metadata.reflection = Word_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kConfidenceFieldNumber;
const int Result::kWordsFieldNumber;
const int Result::kNormalizedFieldNumber;
const int Result::kAlignInfoFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.Result)
}

void Result::InitAsDefaultInstance() {
  align_info_ = const_cast< ::VoiceProxyProtobuf::AlignInfo*>(&::VoiceProxyProtobuf::AlignInfo::default_instance());
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  normalized_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  align_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (normalized_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete normalized_;
  }
  if (this != default_instance_) {
    delete align_info_;
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    confidence_ = 0;
    if (has_normalized()) {
      if (normalized_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        normalized_->clear();
      }
    }
    if (has_align_info()) {
      if (align_info_ != NULL) align_info_->::VoiceProxyProtobuf::AlignInfo::Clear();
    }
  }
  words_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        break;
      }

      // repeated .VoiceProxyProtobuf.Word words = 2;
      case 2: {
        if (tag == 18) {
         parse_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        if (input->ExpectTag(26)) goto parse_normalized;
        break;
      }

      // optional string normalized = 3;
      case 3: {
        if (tag == 26) {
         parse_normalized:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalized()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normalized().data(), this->normalized().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "normalized");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_align_info;
        break;
      }

      // optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
      case 4: {
        if (tag == 34) {
         parse_align_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_align_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.Result)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // repeated .VoiceProxyProtobuf.Word words = 2;
  for (int i = 0; i < this->words_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->words(i), output);
  }

  // optional string normalized = 3;
  if (has_normalized()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalized().data(), this->normalized().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "normalized");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->normalized(), output);
  }

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
  if (has_align_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->align_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.Result)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // repeated .VoiceProxyProtobuf.Word words = 2;
  for (int i = 0; i < this->words_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->words(i), target);
  }

  // optional string normalized = 3;
  if (has_normalized()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalized().data(), this->normalized().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "normalized");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normalized(), target);
  }

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
  if (has_align_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->align_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float confidence = 1;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional string normalized = 3;
    if (has_normalized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalized());
    }

    // optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
    if (has_align_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->align_info());
    }

  }
  // repeated .VoiceProxyProtobuf.Word words = 2;
  total_size += 1 * this->words_size();
  for (int i = 0; i < this->words_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->words(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  words_.MergeFrom(from.words_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_normalized()) {
      set_normalized(from.normalized());
    }
    if (from.has_align_info()) {
      mutable_align_info()->::VoiceProxyProtobuf::AlignInfo::MergeFrom(from.align_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->words())) return false;
  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(confidence_, other->confidence_);
    words_.Swap(&other->words_);
    std::swap(normalized_, other->normalized_);
    std::swap(align_info_, other->align_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiometryResult::kClassnameFieldNumber;
const int BiometryResult::kConfidenceFieldNumber;
const int BiometryResult::kTagFieldNumber;
#endif  // !_MSC_VER

BiometryResult::BiometryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.BiometryResult)
}

void BiometryResult::InitAsDefaultInstance() {
}

BiometryResult::BiometryResult(const BiometryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.BiometryResult)
}

void BiometryResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiometryResult::~BiometryResult() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.BiometryResult)
  SharedDtor();
}

void BiometryResult::SharedDtor() {
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void BiometryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometryResult_descriptor_;
}

const BiometryResult& BiometryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

BiometryResult* BiometryResult::default_instance_ = NULL;

BiometryResult* BiometryResult::New() const {
  return new BiometryResult;
}

void BiometryResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        classname_->clear();
      }
    }
    confidence_ = 0;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiometryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.BiometryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string classname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classname().data(), this->classname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "classname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_confidence;
        break;
      }

      // required float confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.BiometryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.BiometryResult)
  return false;
#undef DO_
}

void BiometryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.BiometryResult)
  // required string classname = 1;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->classname(), output);
  }

  // required float confidence = 2;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.BiometryResult)
}

::google::protobuf::uint8* BiometryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.BiometryResult)
  // required string classname = 1;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->classname(), target);
  }

  // required float confidence = 2;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.BiometryResult)
  return target;
}

int BiometryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string classname = 1;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // required float confidence = 2;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiometryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiometryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiometryResult::MergeFrom(const BiometryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiometryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometryResult::CopyFrom(const BiometryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometryResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BiometryResult::Swap(BiometryResult* other) {
  if (other != this) {
    std::swap(classname_, other->classname_);
    std::swap(confidence_, other->confidence_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiometryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometryResult_descriptor_;
  metadata.reflection = BiometryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDataResponse::kResponseCodeFieldNumber;
const int AddDataResponse::kRecognitionFieldNumber;
const int AddDataResponse::kEndOfUttFieldNumber;
const int AddDataResponse::kMessagesCountFieldNumber;
const int AddDataResponse::kMusicProxyResponseFieldNumber;
const int AddDataResponse::kBioResultFieldNumber;
#endif  // !_MSC_VER

AddDataResponse::AddDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AddDataResponse)
}

void AddDataResponse::InitAsDefaultInstance() {
}

AddDataResponse::AddDataResponse(const AddDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AddDataResponse)
}

void AddDataResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  responsecode_ = 200;
  endofutt_ = false;
  messagescount_ = 1;
  musicproxyresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDataResponse::~AddDataResponse() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AddDataResponse)
  SharedDtor();
}

void AddDataResponse::SharedDtor() {
  if (musicproxyresponse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete musicproxyresponse_;
  }
  if (this != default_instance_) {
  }
}

void AddDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDataResponse_descriptor_;
}

const AddDataResponse& AddDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AddDataResponse* AddDataResponse::default_instance_ = NULL;

AddDataResponse* AddDataResponse::New() const {
  return new AddDataResponse;
}

void AddDataResponse::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    responsecode_ = 200;
    endofutt_ = false;
    messagescount_ = 1;
    if (has_musicproxyresponse()) {
      if (musicproxyresponse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        musicproxyresponse_->clear();
      }
    }
  }
  recognition_.Clear();
  bioresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AddDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BasicProtobuf::ConnectionResponse_ResponseCode_IsValid(value)) {
            set_responsecode(static_cast< ::BasicProtobuf::ConnectionResponse_ResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recognition;
        break;
      }

      // repeated .VoiceProxyProtobuf.Result recognition = 2;
      case 2: {
        if (tag == 18) {
         parse_recognition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recognition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recognition;
        if (input->ExpectTag(24)) goto parse_endOfUtt;
        break;
      }

      // optional bool endOfUtt = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_endOfUtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endofutt_)));
          set_has_endofutt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_messagesCount;
        break;
      }

      // optional int32 messagesCount = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_messagesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagescount_)));
          set_has_messagescount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_musicProxyResponse;
        break;
      }

      // optional string musicProxyResponse = 5;
      case 5: {
        if (tag == 42) {
         parse_musicProxyResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_musicproxyresponse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->musicproxyresponse().data(), this->musicproxyresponse().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "musicproxyresponse");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bioResult;
        break;
      }

      // repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
      case 6: {
        if (tag == 50) {
         parse_bioResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bioresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bioResult;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AddDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AddDataResponse)
  return false;
#undef DO_
}

void AddDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AddDataResponse)
  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsecode(), output);
  }

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  for (int i = 0; i < this->recognition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recognition(i), output);
  }

  // optional bool endOfUtt = 3 [default = false];
  if (has_endofutt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endofutt(), output);
  }

  // optional int32 messagesCount = 4 [default = 1];
  if (has_messagescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->messagescount(), output);
  }

  // optional string musicProxyResponse = 5;
  if (has_musicproxyresponse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musicproxyresponse().data(), this->musicproxyresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musicproxyresponse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->musicproxyresponse(), output);
  }

  // repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
  for (int i = 0; i < this->bioresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bioresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AddDataResponse)
}

::google::protobuf::uint8* AddDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AddDataResponse)
  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsecode(), target);
  }

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  for (int i = 0; i < this->recognition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recognition(i), target);
  }

  // optional bool endOfUtt = 3 [default = false];
  if (has_endofutt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endofutt(), target);
  }

  // optional int32 messagesCount = 4 [default = 1];
  if (has_messagescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->messagescount(), target);
  }

  // optional string musicProxyResponse = 5;
  if (has_musicproxyresponse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musicproxyresponse().data(), this->musicproxyresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musicproxyresponse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->musicproxyresponse(), target);
  }

  // repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
  for (int i = 0; i < this->bioresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bioresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AddDataResponse)
  return target;
}

int AddDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsecode());
    }

    // optional bool endOfUtt = 3 [default = false];
    if (has_endofutt()) {
      total_size += 1 + 1;
    }

    // optional int32 messagesCount = 4 [default = 1];
    if (has_messagescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagescount());
    }

    // optional string musicProxyResponse = 5;
    if (has_musicproxyresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->musicproxyresponse());
    }

  }
  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  total_size += 1 * this->recognition_size();
  for (int i = 0; i < this->recognition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recognition(i));
  }

  // repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
  total_size += 1 * this->bioresult_size();
  for (int i = 0; i < this->bioresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bioresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDataResponse::MergeFrom(const AddDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  recognition_.MergeFrom(from.recognition_);
  bioresult_.MergeFrom(from.bioresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_endofutt()) {
      set_endofutt(from.endofutt());
    }
    if (from.has_messagescount()) {
      set_messagescount(from.messagescount());
    }
    if (from.has_musicproxyresponse()) {
      set_musicproxyresponse(from.musicproxyresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataResponse::CopyFrom(const AddDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->recognition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bioresult())) return false;
  return true;
}

void AddDataResponse::Swap(AddDataResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    recognition_.Swap(&other->recognition_);
    std::swap(endofutt_, other->endofutt_);
    std::swap(messagescount_, other->messagescount_);
    std::swap(musicproxyresponse_, other->musicproxyresponse_);
    bioresult_.Swap(&other->bioresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDataResponse_descriptor_;
  metadata.reflection = AddDataResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceProxyProtobuf

// @@protoc_insertion_point(global_scope)
