// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voiceproxy.proto

#ifndef PROTOBUF_voiceproxy_2eproto__INCLUDED
#define PROTOBUF_voiceproxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace VoiceProxyProtobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_voiceproxy_2eproto();
void protobuf_AssignDesc_voiceproxy_2eproto();
void protobuf_ShutdownFile_voiceproxy_2eproto();

class MusicRequest;
class MusicRequest_MusicParam;
class AdvancedASROptions;
class ConnectionRequest;
class AddData;
class AlignInfo;
class Word;
class Result;
class BiometryResult;
class AddDataResponse;

// ===================================================================

class MusicRequest_MusicParam : public ::google::protobuf::Message {
 public:
  MusicRequest_MusicParam();
  virtual ~MusicRequest_MusicParam();

  MusicRequest_MusicParam(const MusicRequest_MusicParam& from);

  inline MusicRequest_MusicParam& operator=(const MusicRequest_MusicParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicRequest_MusicParam& default_instance();

  void Swap(MusicRequest_MusicParam* other);

  // implements Message ----------------------------------------------

  MusicRequest_MusicParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicRequest_MusicParam& from);
  void MergeFrom(const MusicRequest_MusicParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.MusicRequest.MusicParam)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static MusicRequest_MusicParam* default_instance_;
};
// -------------------------------------------------------------------

class MusicRequest : public ::google::protobuf::Message {
 public:
  MusicRequest();
  virtual ~MusicRequest();

  MusicRequest(const MusicRequest& from);

  inline MusicRequest& operator=(const MusicRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicRequest& default_instance();

  void Swap(MusicRequest* other);

  // implements Message ----------------------------------------------

  MusicRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicRequest& from);
  void MergeFrom(const MusicRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MusicRequest_MusicParam MusicParam;

  // accessors -------------------------------------------------------

  // repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
  inline int musicproxyoptions_size() const;
  inline void clear_musicproxyoptions();
  static const int kMusicProxyOptionsFieldNumber = 1;
  inline const ::VoiceProxyProtobuf::MusicRequest_MusicParam& musicproxyoptions(int index) const;
  inline ::VoiceProxyProtobuf::MusicRequest_MusicParam* mutable_musicproxyoptions(int index);
  inline ::VoiceProxyProtobuf::MusicRequest_MusicParam* add_musicproxyoptions();
  inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::MusicRequest_MusicParam >&
      musicproxyoptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::MusicRequest_MusicParam >*
      mutable_musicproxyoptions();

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.MusicRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::MusicRequest_MusicParam > musicproxyoptions_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static MusicRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdvancedASROptions : public ::google::protobuf::Message {
 public:
  AdvancedASROptions();
  virtual ~AdvancedASROptions();

  AdvancedASROptions(const AdvancedASROptions& from);

  inline AdvancedASROptions& operator=(const AdvancedASROptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvancedASROptions& default_instance();

  void Swap(AdvancedASROptions* other);

  // implements Message ----------------------------------------------

  AdvancedASROptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvancedASROptions& from);
  void MergeFrom(const AdvancedASROptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool partial_results = 1 [default = true];
  inline bool has_partial_results() const;
  inline void clear_partial_results();
  static const int kPartialResultsFieldNumber = 1;
  inline bool partial_results() const;
  inline void set_partial_results(bool value);

  // optional float beam = 2 [default = -1];
  inline bool has_beam() const;
  inline void clear_beam();
  static const int kBeamFieldNumber = 2;
  inline float beam() const;
  inline void set_beam(float value);

  // optional float lattice_beam = 3 [default = -1];
  inline bool has_lattice_beam() const;
  inline void clear_lattice_beam();
  static const int kLatticeBeamFieldNumber = 3;
  inline float lattice_beam() const;
  inline void set_lattice_beam(float value);

  // optional int32 lattice_nbest = 4 [default = -1];
  inline bool has_lattice_nbest() const;
  inline void clear_lattice_nbest();
  static const int kLatticeNbestFieldNumber = 4;
  inline ::google::protobuf::int32 lattice_nbest() const;
  inline void set_lattice_nbest(::google::protobuf::int32 value);

  // optional int32 utterance_silence = 5 [default = 120];
  inline bool has_utterance_silence() const;
  inline void clear_utterance_silence();
  static const int kUtteranceSilenceFieldNumber = 5;
  inline ::google::protobuf::int32 utterance_silence() const;
  inline void set_utterance_silence(::google::protobuf::int32 value);

  // optional bool allow_multi_utt = 16 [default = true];
  inline bool has_allow_multi_utt() const;
  inline void clear_allow_multi_utt();
  static const int kAllowMultiUttFieldNumber = 16;
  inline bool allow_multi_utt() const;
  inline void set_allow_multi_utt(bool value);

  // optional int32 chunk_process_limit = 17 [default = 100];
  inline bool has_chunk_process_limit() const;
  inline void clear_chunk_process_limit();
  static const int kChunkProcessLimitFieldNumber = 17;
  inline ::google::protobuf::int32 chunk_process_limit() const;
  inline void set_chunk_process_limit(::google::protobuf::int32 value);

  // optional int32 cmn_window = 18 [default = 600];
  inline bool has_cmn_window() const;
  inline void clear_cmn_window();
  static const int kCmnWindowFieldNumber = 18;
  inline ::google::protobuf::int32 cmn_window() const;
  inline void set_cmn_window(::google::protobuf::int32 value);

  // optional int32 cmn_latency = 19 [default = 150];
  inline bool has_cmn_latency() const;
  inline void clear_cmn_latency();
  static const int kCmnLatencyFieldNumber = 19;
  inline ::google::protobuf::int32 cmn_latency() const;
  inline void set_cmn_latency(::google::protobuf::int32 value);

  // optional bool capitalize = 20 [default = false];
  inline bool has_capitalize() const;
  inline void clear_capitalize();
  static const int kCapitalizeFieldNumber = 20;
  inline bool capitalize() const;
  inline void set_capitalize(bool value);

  // optional int32 expected_num_count = 21 [default = 0];
  inline bool has_expected_num_count() const;
  inline void clear_expected_num_count();
  static const int kExpectedNumCountFieldNumber = 21;
  inline ::google::protobuf::int32 expected_num_count() const;
  inline void set_expected_num_count(::google::protobuf::int32 value);

  // repeated string grammar = 22;
  inline int grammar_size() const;
  inline void clear_grammar();
  static const int kGrammarFieldNumber = 22;
  inline const ::std::string& grammar(int index) const;
  inline ::std::string* mutable_grammar(int index);
  inline void set_grammar(int index, const ::std::string& value);
  inline void set_grammar(int index, const char* value);
  inline void set_grammar(int index, const char* value, size_t size);
  inline ::std::string* add_grammar();
  inline void add_grammar(const ::std::string& value);
  inline void add_grammar(const char* value);
  inline void add_grammar(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& grammar() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_grammar();

  // optional string srgs = 23;
  inline bool has_srgs() const;
  inline void clear_srgs();
  static const int kSrgsFieldNumber = 23;
  inline const ::std::string& srgs() const;
  inline void set_srgs(const ::std::string& value);
  inline void set_srgs(const char* value);
  inline void set_srgs(const char* value, size_t size);
  inline ::std::string* mutable_srgs();
  inline ::std::string* release_srgs();
  inline void set_allocated_srgs(::std::string* srgs);

  // optional string biometry = 24;
  inline bool has_biometry() const;
  inline void clear_biometry();
  static const int kBiometryFieldNumber = 24;
  inline const ::std::string& biometry() const;
  inline void set_biometry(const ::std::string& value);
  inline void set_biometry(const char* value);
  inline void set_biometry(const char* value, size_t size);
  inline ::std::string* mutable_biometry();
  inline ::std::string* release_biometry();
  inline void set_allocated_biometry(::std::string* biometry);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AdvancedASROptions)
 private:
  inline void set_has_partial_results();
  inline void clear_has_partial_results();
  inline void set_has_beam();
  inline void clear_has_beam();
  inline void set_has_lattice_beam();
  inline void clear_has_lattice_beam();
  inline void set_has_lattice_nbest();
  inline void clear_has_lattice_nbest();
  inline void set_has_utterance_silence();
  inline void clear_has_utterance_silence();
  inline void set_has_allow_multi_utt();
  inline void clear_has_allow_multi_utt();
  inline void set_has_chunk_process_limit();
  inline void clear_has_chunk_process_limit();
  inline void set_has_cmn_window();
  inline void clear_has_cmn_window();
  inline void set_has_cmn_latency();
  inline void clear_has_cmn_latency();
  inline void set_has_capitalize();
  inline void clear_has_capitalize();
  inline void set_has_expected_num_count();
  inline void clear_has_expected_num_count();
  inline void set_has_srgs();
  inline void clear_has_srgs();
  inline void set_has_biometry();
  inline void clear_has_biometry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float beam_;
  float lattice_beam_;
  ::google::protobuf::int32 lattice_nbest_;
  ::google::protobuf::int32 utterance_silence_;
  bool partial_results_;
  bool allow_multi_utt_;
  bool capitalize_;
  ::google::protobuf::int32 chunk_process_limit_;
  ::google::protobuf::int32 cmn_window_;
  ::google::protobuf::int32 cmn_latency_;
  ::google::protobuf::RepeatedPtrField< ::std::string> grammar_;
  ::std::string* srgs_;
  ::std::string* biometry_;
  ::google::protobuf::int32 expected_num_count_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AdvancedASROptions* default_instance_;
};
// -------------------------------------------------------------------

class ConnectionRequest : public ::google::protobuf::Message {
 public:
  ConnectionRequest();
  virtual ~ConnectionRequest();

  ConnectionRequest(const ConnectionRequest& from);

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionRequest& default_instance();

  void Swap(ConnectionRequest* other);

  // implements Message ----------------------------------------------

  ConnectionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionRequest& from);
  void MergeFrom(const ConnectionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protocolVersion = 1 [default = 1];
  inline bool has_protocolversion() const;
  inline void clear_protocolversion();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocolversion() const;
  inline void set_protocolversion(::google::protobuf::int32 value);

  // required string speechkitVersion = 2;
  inline bool has_speechkitversion() const;
  inline void clear_speechkitversion();
  static const int kSpeechkitVersionFieldNumber = 2;
  inline const ::std::string& speechkitversion() const;
  inline void set_speechkitversion(const ::std::string& value);
  inline void set_speechkitversion(const char* value);
  inline void set_speechkitversion(const char* value, size_t size);
  inline ::std::string* mutable_speechkitversion();
  inline ::std::string* release_speechkitversion();
  inline void set_allocated_speechkitversion(::std::string* speechkitversion);

  // required string serviceName = 3;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // required string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string apiKey = 5;
  inline bool has_apikey() const;
  inline void clear_apikey();
  static const int kApiKeyFieldNumber = 5;
  inline const ::std::string& apikey() const;
  inline void set_apikey(const ::std::string& value);
  inline void set_apikey(const char* value);
  inline void set_apikey(const char* value, size_t size);
  inline ::std::string* mutable_apikey();
  inline ::std::string* release_apikey();
  inline void set_allocated_apikey(::std::string* apikey);

  // required string applicationName = 6;
  inline bool has_applicationname() const;
  inline void clear_applicationname();
  static const int kApplicationNameFieldNumber = 6;
  inline const ::std::string& applicationname() const;
  inline void set_applicationname(const ::std::string& value);
  inline void set_applicationname(const char* value);
  inline void set_applicationname(const char* value, size_t size);
  inline ::std::string* mutable_applicationname();
  inline ::std::string* release_applicationname();
  inline void set_allocated_applicationname(::std::string* applicationname);

  // required string device = 7;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 7;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // required string coords = 8;
  inline bool has_coords() const;
  inline void clear_coords();
  static const int kCoordsFieldNumber = 8;
  inline const ::std::string& coords() const;
  inline void set_coords(const ::std::string& value);
  inline void set_coords(const char* value);
  inline void set_coords(const char* value, size_t size);
  inline ::std::string* mutable_coords();
  inline ::std::string* release_coords();
  inline void set_allocated_coords(::std::string* coords);

  // required string topic = 9;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 9;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required string lang = 10;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 10;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // required string format = 11;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 11;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // optional bool punctuation = 12 [default = true];
  inline bool has_punctuation() const;
  inline void clear_punctuation();
  static const int kPunctuationFieldNumber = 12;
  inline bool punctuation() const;
  inline void set_punctuation(bool value);

  // optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
  inline bool has_musicrequest() const;
  inline void clear_musicrequest();
  static const int kMusicRequestFieldNumber = 17;
  inline const ::VoiceProxyProtobuf::MusicRequest& musicrequest() const;
  inline ::VoiceProxyProtobuf::MusicRequest* mutable_musicrequest();
  inline ::VoiceProxyProtobuf::MusicRequest* release_musicrequest();
  inline void set_allocated_musicrequest(::VoiceProxyProtobuf::MusicRequest* musicrequest);

  // optional bool disableAntimatNormalizer = 18 [default = false];
  inline bool has_disableantimatnormalizer() const;
  inline void clear_disableantimatnormalizer();
  static const int kDisableAntimatNormalizerFieldNumber = 18;
  inline bool disableantimatnormalizer() const;
  inline void set_disableantimatnormalizer(bool value);

  // optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
  inline bool has_advancedasroptions() const;
  inline void clear_advancedasroptions();
  static const int kAdvancedASROptionsFieldNumber = 19;
  inline const ::VoiceProxyProtobuf::AdvancedASROptions& advancedasroptions() const;
  inline ::VoiceProxyProtobuf::AdvancedASROptions* mutable_advancedasroptions();
  inline ::VoiceProxyProtobuf::AdvancedASROptions* release_advancedasroptions();
  inline void set_allocated_advancedasroptions(::VoiceProxyProtobuf::AdvancedASROptions* advancedasroptions);

  // optional bool skipAudioFromLogging = 20 [default = false];
  inline bool has_skipaudiofromlogging() const;
  inline void clear_skipaudiofromlogging();
  static const int kSkipAudioFromLoggingFieldNumber = 20;
  inline bool skipaudiofromlogging() const;
  inline void set_skipaudiofromlogging(bool value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.ConnectionRequest)
 private:
  inline void set_has_protocolversion();
  inline void clear_has_protocolversion();
  inline void set_has_speechkitversion();
  inline void clear_has_speechkitversion();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_apikey();
  inline void clear_has_apikey();
  inline void set_has_applicationname();
  inline void clear_has_applicationname();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_coords();
  inline void clear_has_coords();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_punctuation();
  inline void clear_has_punctuation();
  inline void set_has_musicrequest();
  inline void clear_has_musicrequest();
  inline void set_has_disableantimatnormalizer();
  inline void clear_has_disableantimatnormalizer();
  inline void set_has_advancedasroptions();
  inline void clear_has_advancedasroptions();
  inline void set_has_skipaudiofromlogging();
  inline void clear_has_skipaudiofromlogging();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* speechkitversion_;
  ::std::string* servicename_;
  ::std::string* uuid_;
  ::std::string* apikey_;
  ::std::string* applicationname_;
  ::std::string* device_;
  ::std::string* coords_;
  ::std::string* topic_;
  ::std::string* lang_;
  ::google::protobuf::int32 protocolversion_;
  bool punctuation_;
  bool disableantimatnormalizer_;
  bool skipaudiofromlogging_;
  ::std::string* format_;
  ::VoiceProxyProtobuf::MusicRequest* musicrequest_;
  ::VoiceProxyProtobuf::AdvancedASROptions* advancedasroptions_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static ConnectionRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddData : public ::google::protobuf::Message {
 public:
  AddData();
  virtual ~AddData();

  AddData(const AddData& from);

  inline AddData& operator=(const AddData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddData& default_instance();

  void Swap(AddData* other);

  // implements Message ----------------------------------------------

  AddData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddData& from);
  void MergeFrom(const AddData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audioData = 1;
  inline bool has_audiodata() const;
  inline void clear_audiodata();
  static const int kAudioDataFieldNumber = 1;
  inline const ::std::string& audiodata() const;
  inline void set_audiodata(const ::std::string& value);
  inline void set_audiodata(const char* value);
  inline void set_audiodata(const void* value, size_t size);
  inline ::std::string* mutable_audiodata();
  inline ::std::string* release_audiodata();
  inline void set_allocated_audiodata(::std::string* audiodata);

  // required bool lastChunk = 2;
  inline bool has_lastchunk() const;
  inline void clear_lastchunk();
  static const int kLastChunkFieldNumber = 2;
  inline bool lastchunk() const;
  inline void set_lastchunk(bool value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AddData)
 private:
  inline void set_has_audiodata();
  inline void clear_has_audiodata();
  inline void set_has_lastchunk();
  inline void clear_has_lastchunk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* audiodata_;
  bool lastchunk_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AddData* default_instance_;
};
// -------------------------------------------------------------------

class AlignInfo : public ::google::protobuf::Message {
 public:
  AlignInfo();
  virtual ~AlignInfo();

  AlignInfo(const AlignInfo& from);

  inline AlignInfo& operator=(const AlignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlignInfo& default_instance();

  void Swap(AlignInfo* other);

  // implements Message ----------------------------------------------

  AlignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlignInfo& from);
  void MergeFrom(const AlignInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline float start_time() const;
  inline void set_start_time(float value);

  // optional float end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline float end_time() const;
  inline void set_end_time(float value);

  // optional float acoustic_score = 3;
  inline bool has_acoustic_score() const;
  inline void clear_acoustic_score();
  static const int kAcousticScoreFieldNumber = 3;
  inline float acoustic_score() const;
  inline void set_acoustic_score(float value);

  // optional float graph_score = 4;
  inline bool has_graph_score() const;
  inline void clear_graph_score();
  static const int kGraphScoreFieldNumber = 4;
  inline float graph_score() const;
  inline void set_graph_score(float value);

  // optional float lm_score = 5;
  inline bool has_lm_score() const;
  inline void clear_lm_score();
  static const int kLmScoreFieldNumber = 5;
  inline float lm_score() const;
  inline void set_lm_score(float value);

  // optional float total_score = 6;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 6;
  inline float total_score() const;
  inline void set_total_score(float value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AlignInfo)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_acoustic_score();
  inline void clear_has_acoustic_score();
  inline void set_has_graph_score();
  inline void clear_has_graph_score();
  inline void set_has_lm_score();
  inline void clear_has_lm_score();
  inline void set_has_total_score();
  inline void clear_has_total_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float start_time_;
  float end_time_;
  float acoustic_score_;
  float graph_score_;
  float lm_score_;
  float total_score_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AlignInfo* default_instance_;
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  void Swap(Word* other);

  // implements Message ----------------------------------------------

  Word* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float confidence = 1;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  inline float confidence() const;
  inline void set_confidence(float value);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
  inline bool has_align_info() const;
  inline void clear_align_info();
  static const int kAlignInfoFieldNumber = 3;
  inline const ::VoiceProxyProtobuf::AlignInfo& align_info() const;
  inline ::VoiceProxyProtobuf::AlignInfo* mutable_align_info();
  inline ::VoiceProxyProtobuf::AlignInfo* release_align_info();
  inline void set_allocated_align_info(::VoiceProxyProtobuf::AlignInfo* align_info);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.Word)
 private:
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_align_info();
  inline void clear_has_align_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::VoiceProxyProtobuf::AlignInfo* align_info_;
  float confidence_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static Word* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float confidence = 1;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  inline float confidence() const;
  inline void set_confidence(float value);

  // repeated .VoiceProxyProtobuf.Word words = 2;
  inline int words_size() const;
  inline void clear_words();
  static const int kWordsFieldNumber = 2;
  inline const ::VoiceProxyProtobuf::Word& words(int index) const;
  inline ::VoiceProxyProtobuf::Word* mutable_words(int index);
  inline ::VoiceProxyProtobuf::Word* add_words();
  inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >&
      words() const;
  inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >*
      mutable_words();

  // optional string normalized = 3;
  inline bool has_normalized() const;
  inline void clear_normalized();
  static const int kNormalizedFieldNumber = 3;
  inline const ::std::string& normalized() const;
  inline void set_normalized(const ::std::string& value);
  inline void set_normalized(const char* value);
  inline void set_normalized(const char* value, size_t size);
  inline ::std::string* mutable_normalized();
  inline ::std::string* release_normalized();
  inline void set_allocated_normalized(::std::string* normalized);

  // optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
  inline bool has_align_info() const;
  inline void clear_align_info();
  static const int kAlignInfoFieldNumber = 4;
  inline const ::VoiceProxyProtobuf::AlignInfo& align_info() const;
  inline ::VoiceProxyProtobuf::AlignInfo* mutable_align_info();
  inline ::VoiceProxyProtobuf::AlignInfo* release_align_info();
  inline void set_allocated_align_info(::VoiceProxyProtobuf::AlignInfo* align_info);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.Result)
 private:
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_normalized();
  inline void clear_has_normalized();
  inline void set_has_align_info();
  inline void clear_has_align_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word > words_;
  ::std::string* normalized_;
  ::VoiceProxyProtobuf::AlignInfo* align_info_;
  float confidence_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class BiometryResult : public ::google::protobuf::Message {
 public:
  BiometryResult();
  virtual ~BiometryResult();

  BiometryResult(const BiometryResult& from);

  inline BiometryResult& operator=(const BiometryResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiometryResult& default_instance();

  void Swap(BiometryResult* other);

  // implements Message ----------------------------------------------

  BiometryResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiometryResult& from);
  void MergeFrom(const BiometryResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string classname = 1;
  inline bool has_classname() const;
  inline void clear_classname();
  static const int kClassnameFieldNumber = 1;
  inline const ::std::string& classname() const;
  inline void set_classname(const ::std::string& value);
  inline void set_classname(const char* value);
  inline void set_classname(const char* value, size_t size);
  inline ::std::string* mutable_classname();
  inline ::std::string* release_classname();
  inline void set_allocated_classname(::std::string* classname);

  // required float confidence = 2;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  inline float confidence() const;
  inline void set_confidence(float value);

  // optional string tag = 3;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 3;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.BiometryResult)
 private:
  inline void set_has_classname();
  inline void clear_has_classname();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* classname_;
  ::std::string* tag_;
  float confidence_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static BiometryResult* default_instance_;
};
// -------------------------------------------------------------------

class AddDataResponse : public ::google::protobuf::Message {
 public:
  AddDataResponse();
  virtual ~AddDataResponse();

  AddDataResponse(const AddDataResponse& from);

  inline AddDataResponse& operator=(const AddDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDataResponse& default_instance();

  void Swap(AddDataResponse* other);

  // implements Message ----------------------------------------------

  AddDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddDataResponse& from);
  void MergeFrom(const AddDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline ::BasicProtobuf::ConnectionResponse_ResponseCode responsecode() const;
  inline void set_responsecode(::BasicProtobuf::ConnectionResponse_ResponseCode value);

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  inline int recognition_size() const;
  inline void clear_recognition();
  static const int kRecognitionFieldNumber = 2;
  inline const ::VoiceProxyProtobuf::Result& recognition(int index) const;
  inline ::VoiceProxyProtobuf::Result* mutable_recognition(int index);
  inline ::VoiceProxyProtobuf::Result* add_recognition();
  inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >&
      recognition() const;
  inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >*
      mutable_recognition();

  // optional bool endOfUtt = 3 [default = false];
  inline bool has_endofutt() const;
  inline void clear_endofutt();
  static const int kEndOfUttFieldNumber = 3;
  inline bool endofutt() const;
  inline void set_endofutt(bool value);

  // optional int32 messagesCount = 4 [default = 1];
  inline bool has_messagescount() const;
  inline void clear_messagescount();
  static const int kMessagesCountFieldNumber = 4;
  inline ::google::protobuf::int32 messagescount() const;
  inline void set_messagescount(::google::protobuf::int32 value);

  // optional string musicProxyResponse = 5;
  inline bool has_musicproxyresponse() const;
  inline void clear_musicproxyresponse();
  static const int kMusicProxyResponseFieldNumber = 5;
  inline const ::std::string& musicproxyresponse() const;
  inline void set_musicproxyresponse(const ::std::string& value);
  inline void set_musicproxyresponse(const char* value);
  inline void set_musicproxyresponse(const char* value, size_t size);
  inline ::std::string* mutable_musicproxyresponse();
  inline ::std::string* release_musicproxyresponse();
  inline void set_allocated_musicproxyresponse(::std::string* musicproxyresponse);

  // repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
  inline int bioresult_size() const;
  inline void clear_bioresult();
  static const int kBioResultFieldNumber = 6;
  inline const ::VoiceProxyProtobuf::BiometryResult& bioresult(int index) const;
  inline ::VoiceProxyProtobuf::BiometryResult* mutable_bioresult(int index);
  inline ::VoiceProxyProtobuf::BiometryResult* add_bioresult();
  inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::BiometryResult >&
      bioresult() const;
  inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::BiometryResult >*
      mutable_bioresult();

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AddDataResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_endofutt();
  inline void clear_has_endofutt();
  inline void set_has_messagescount();
  inline void clear_has_messagescount();
  inline void set_has_musicproxyresponse();
  inline void clear_has_musicproxyresponse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result > recognition_;
  int responsecode_;
  bool endofutt_;
  ::std::string* musicproxyresponse_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::BiometryResult > bioresult_;
  ::google::protobuf::int32 messagescount_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AddDataResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MusicRequest_MusicParam

// required string name = 1;
inline bool MusicRequest_MusicParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicRequest_MusicParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicRequest_MusicParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicRequest_MusicParam::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MusicRequest_MusicParam::name() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
  return *name_;
}
inline void MusicRequest_MusicParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
}
inline void MusicRequest_MusicParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
}
inline void MusicRequest_MusicParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
}
inline ::std::string* MusicRequest_MusicParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
  return name_;
}
inline ::std::string* MusicRequest_MusicParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MusicRequest_MusicParam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.MusicRequest.MusicParam.name)
}

// required string value = 2;
inline bool MusicRequest_MusicParam::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicRequest_MusicParam::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicRequest_MusicParam::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicRequest_MusicParam::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MusicRequest_MusicParam::value() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
  return *value_;
}
inline void MusicRequest_MusicParam::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
}
inline void MusicRequest_MusicParam::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
}
inline void MusicRequest_MusicParam::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
}
inline ::std::string* MusicRequest_MusicParam::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
  return value_;
}
inline ::std::string* MusicRequest_MusicParam::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MusicRequest_MusicParam::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.MusicRequest.MusicParam.value)
}

// -------------------------------------------------------------------

// MusicRequest

// repeated .VoiceProxyProtobuf.MusicRequest.MusicParam musicProxyOptions = 1;
inline int MusicRequest::musicproxyoptions_size() const {
  return musicproxyoptions_.size();
}
inline void MusicRequest::clear_musicproxyoptions() {
  musicproxyoptions_.Clear();
}
inline const ::VoiceProxyProtobuf::MusicRequest_MusicParam& MusicRequest::musicproxyoptions(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.MusicRequest.musicProxyOptions)
  return musicproxyoptions_.Get(index);
}
inline ::VoiceProxyProtobuf::MusicRequest_MusicParam* MusicRequest::mutable_musicproxyoptions(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.MusicRequest.musicProxyOptions)
  return musicproxyoptions_.Mutable(index);
}
inline ::VoiceProxyProtobuf::MusicRequest_MusicParam* MusicRequest::add_musicproxyoptions() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.MusicRequest.musicProxyOptions)
  return musicproxyoptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::MusicRequest_MusicParam >&
MusicRequest::musicproxyoptions() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.MusicRequest.musicProxyOptions)
  return musicproxyoptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::MusicRequest_MusicParam >*
MusicRequest::mutable_musicproxyoptions() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.MusicRequest.musicProxyOptions)
  return &musicproxyoptions_;
}

// -------------------------------------------------------------------

// AdvancedASROptions

// optional bool partial_results = 1 [default = true];
inline bool AdvancedASROptions::has_partial_results() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvancedASROptions::set_has_partial_results() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvancedASROptions::clear_has_partial_results() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvancedASROptions::clear_partial_results() {
  partial_results_ = true;
  clear_has_partial_results();
}
inline bool AdvancedASROptions::partial_results() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.partial_results)
  return partial_results_;
}
inline void AdvancedASROptions::set_partial_results(bool value) {
  set_has_partial_results();
  partial_results_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.partial_results)
}

// optional float beam = 2 [default = -1];
inline bool AdvancedASROptions::has_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdvancedASROptions::set_has_beam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdvancedASROptions::clear_has_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdvancedASROptions::clear_beam() {
  beam_ = -1;
  clear_has_beam();
}
inline float AdvancedASROptions::beam() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.beam)
  return beam_;
}
inline void AdvancedASROptions::set_beam(float value) {
  set_has_beam();
  beam_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.beam)
}

// optional float lattice_beam = 3 [default = -1];
inline bool AdvancedASROptions::has_lattice_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdvancedASROptions::set_has_lattice_beam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdvancedASROptions::clear_has_lattice_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdvancedASROptions::clear_lattice_beam() {
  lattice_beam_ = -1;
  clear_has_lattice_beam();
}
inline float AdvancedASROptions::lattice_beam() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.lattice_beam)
  return lattice_beam_;
}
inline void AdvancedASROptions::set_lattice_beam(float value) {
  set_has_lattice_beam();
  lattice_beam_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.lattice_beam)
}

// optional int32 lattice_nbest = 4 [default = -1];
inline bool AdvancedASROptions::has_lattice_nbest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdvancedASROptions::set_has_lattice_nbest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdvancedASROptions::clear_has_lattice_nbest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdvancedASROptions::clear_lattice_nbest() {
  lattice_nbest_ = -1;
  clear_has_lattice_nbest();
}
inline ::google::protobuf::int32 AdvancedASROptions::lattice_nbest() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.lattice_nbest)
  return lattice_nbest_;
}
inline void AdvancedASROptions::set_lattice_nbest(::google::protobuf::int32 value) {
  set_has_lattice_nbest();
  lattice_nbest_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.lattice_nbest)
}

// optional int32 utterance_silence = 5 [default = 120];
inline bool AdvancedASROptions::has_utterance_silence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdvancedASROptions::set_has_utterance_silence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdvancedASROptions::clear_has_utterance_silence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdvancedASROptions::clear_utterance_silence() {
  utterance_silence_ = 120;
  clear_has_utterance_silence();
}
inline ::google::protobuf::int32 AdvancedASROptions::utterance_silence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.utterance_silence)
  return utterance_silence_;
}
inline void AdvancedASROptions::set_utterance_silence(::google::protobuf::int32 value) {
  set_has_utterance_silence();
  utterance_silence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.utterance_silence)
}

// optional bool allow_multi_utt = 16 [default = true];
inline bool AdvancedASROptions::has_allow_multi_utt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdvancedASROptions::set_has_allow_multi_utt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdvancedASROptions::clear_has_allow_multi_utt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdvancedASROptions::clear_allow_multi_utt() {
  allow_multi_utt_ = true;
  clear_has_allow_multi_utt();
}
inline bool AdvancedASROptions::allow_multi_utt() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.allow_multi_utt)
  return allow_multi_utt_;
}
inline void AdvancedASROptions::set_allow_multi_utt(bool value) {
  set_has_allow_multi_utt();
  allow_multi_utt_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.allow_multi_utt)
}

// optional int32 chunk_process_limit = 17 [default = 100];
inline bool AdvancedASROptions::has_chunk_process_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdvancedASROptions::set_has_chunk_process_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdvancedASROptions::clear_has_chunk_process_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdvancedASROptions::clear_chunk_process_limit() {
  chunk_process_limit_ = 100;
  clear_has_chunk_process_limit();
}
inline ::google::protobuf::int32 AdvancedASROptions::chunk_process_limit() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.chunk_process_limit)
  return chunk_process_limit_;
}
inline void AdvancedASROptions::set_chunk_process_limit(::google::protobuf::int32 value) {
  set_has_chunk_process_limit();
  chunk_process_limit_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.chunk_process_limit)
}

// optional int32 cmn_window = 18 [default = 600];
inline bool AdvancedASROptions::has_cmn_window() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdvancedASROptions::set_has_cmn_window() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdvancedASROptions::clear_has_cmn_window() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdvancedASROptions::clear_cmn_window() {
  cmn_window_ = 600;
  clear_has_cmn_window();
}
inline ::google::protobuf::int32 AdvancedASROptions::cmn_window() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.cmn_window)
  return cmn_window_;
}
inline void AdvancedASROptions::set_cmn_window(::google::protobuf::int32 value) {
  set_has_cmn_window();
  cmn_window_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.cmn_window)
}

// optional int32 cmn_latency = 19 [default = 150];
inline bool AdvancedASROptions::has_cmn_latency() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdvancedASROptions::set_has_cmn_latency() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdvancedASROptions::clear_has_cmn_latency() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdvancedASROptions::clear_cmn_latency() {
  cmn_latency_ = 150;
  clear_has_cmn_latency();
}
inline ::google::protobuf::int32 AdvancedASROptions::cmn_latency() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.cmn_latency)
  return cmn_latency_;
}
inline void AdvancedASROptions::set_cmn_latency(::google::protobuf::int32 value) {
  set_has_cmn_latency();
  cmn_latency_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.cmn_latency)
}

// optional bool capitalize = 20 [default = false];
inline bool AdvancedASROptions::has_capitalize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AdvancedASROptions::set_has_capitalize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AdvancedASROptions::clear_has_capitalize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AdvancedASROptions::clear_capitalize() {
  capitalize_ = false;
  clear_has_capitalize();
}
inline bool AdvancedASROptions::capitalize() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.capitalize)
  return capitalize_;
}
inline void AdvancedASROptions::set_capitalize(bool value) {
  set_has_capitalize();
  capitalize_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.capitalize)
}

// optional int32 expected_num_count = 21 [default = 0];
inline bool AdvancedASROptions::has_expected_num_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AdvancedASROptions::set_has_expected_num_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AdvancedASROptions::clear_has_expected_num_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AdvancedASROptions::clear_expected_num_count() {
  expected_num_count_ = 0;
  clear_has_expected_num_count();
}
inline ::google::protobuf::int32 AdvancedASROptions::expected_num_count() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.expected_num_count)
  return expected_num_count_;
}
inline void AdvancedASROptions::set_expected_num_count(::google::protobuf::int32 value) {
  set_has_expected_num_count();
  expected_num_count_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.expected_num_count)
}

// repeated string grammar = 22;
inline int AdvancedASROptions::grammar_size() const {
  return grammar_.size();
}
inline void AdvancedASROptions::clear_grammar() {
  grammar_.Clear();
}
inline const ::std::string& AdvancedASROptions::grammar(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.grammar)
  return grammar_.Get(index);
}
inline ::std::string* AdvancedASROptions::mutable_grammar(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AdvancedASROptions.grammar)
  return grammar_.Mutable(index);
}
inline void AdvancedASROptions::set_grammar(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.grammar)
  grammar_.Mutable(index)->assign(value);
}
inline void AdvancedASROptions::set_grammar(int index, const char* value) {
  grammar_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AdvancedASROptions.grammar)
}
inline void AdvancedASROptions::set_grammar(int index, const char* value, size_t size) {
  grammar_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AdvancedASROptions.grammar)
}
inline ::std::string* AdvancedASROptions::add_grammar() {
  return grammar_.Add();
}
inline void AdvancedASROptions::add_grammar(const ::std::string& value) {
  grammar_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.AdvancedASROptions.grammar)
}
inline void AdvancedASROptions::add_grammar(const char* value) {
  grammar_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VoiceProxyProtobuf.AdvancedASROptions.grammar)
}
inline void AdvancedASROptions::add_grammar(const char* value, size_t size) {
  grammar_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VoiceProxyProtobuf.AdvancedASROptions.grammar)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdvancedASROptions::grammar() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.AdvancedASROptions.grammar)
  return grammar_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdvancedASROptions::mutable_grammar() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.AdvancedASROptions.grammar)
  return &grammar_;
}

// optional string srgs = 23;
inline bool AdvancedASROptions::has_srgs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AdvancedASROptions::set_has_srgs() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AdvancedASROptions::clear_has_srgs() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AdvancedASROptions::clear_srgs() {
  if (srgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srgs_->clear();
  }
  clear_has_srgs();
}
inline const ::std::string& AdvancedASROptions::srgs() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.srgs)
  return *srgs_;
}
inline void AdvancedASROptions::set_srgs(const ::std::string& value) {
  set_has_srgs();
  if (srgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srgs_ = new ::std::string;
  }
  srgs_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.srgs)
}
inline void AdvancedASROptions::set_srgs(const char* value) {
  set_has_srgs();
  if (srgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srgs_ = new ::std::string;
  }
  srgs_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AdvancedASROptions.srgs)
}
inline void AdvancedASROptions::set_srgs(const char* value, size_t size) {
  set_has_srgs();
  if (srgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srgs_ = new ::std::string;
  }
  srgs_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AdvancedASROptions.srgs)
}
inline ::std::string* AdvancedASROptions::mutable_srgs() {
  set_has_srgs();
  if (srgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    srgs_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AdvancedASROptions.srgs)
  return srgs_;
}
inline ::std::string* AdvancedASROptions::release_srgs() {
  clear_has_srgs();
  if (srgs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = srgs_;
    srgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdvancedASROptions::set_allocated_srgs(::std::string* srgs) {
  if (srgs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srgs_;
  }
  if (srgs) {
    set_has_srgs();
    srgs_ = srgs;
  } else {
    clear_has_srgs();
    srgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AdvancedASROptions.srgs)
}

// optional string biometry = 24;
inline bool AdvancedASROptions::has_biometry() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AdvancedASROptions::set_has_biometry() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AdvancedASROptions::clear_has_biometry() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AdvancedASROptions::clear_biometry() {
  if (biometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    biometry_->clear();
  }
  clear_has_biometry();
}
inline const ::std::string& AdvancedASROptions::biometry() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AdvancedASROptions.biometry)
  return *biometry_;
}
inline void AdvancedASROptions::set_biometry(const ::std::string& value) {
  set_has_biometry();
  if (biometry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    biometry_ = new ::std::string;
  }
  biometry_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AdvancedASROptions.biometry)
}
inline void AdvancedASROptions::set_biometry(const char* value) {
  set_has_biometry();
  if (biometry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    biometry_ = new ::std::string;
  }
  biometry_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AdvancedASROptions.biometry)
}
inline void AdvancedASROptions::set_biometry(const char* value, size_t size) {
  set_has_biometry();
  if (biometry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    biometry_ = new ::std::string;
  }
  biometry_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AdvancedASROptions.biometry)
}
inline ::std::string* AdvancedASROptions::mutable_biometry() {
  set_has_biometry();
  if (biometry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    biometry_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AdvancedASROptions.biometry)
  return biometry_;
}
inline ::std::string* AdvancedASROptions::release_biometry() {
  clear_has_biometry();
  if (biometry_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = biometry_;
    biometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdvancedASROptions::set_allocated_biometry(::std::string* biometry) {
  if (biometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete biometry_;
  }
  if (biometry) {
    set_has_biometry();
    biometry_ = biometry;
  } else {
    clear_has_biometry();
    biometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AdvancedASROptions.biometry)
}

// -------------------------------------------------------------------

// ConnectionRequest

// optional int32 protocolVersion = 1 [default = 1];
inline bool ConnectionRequest::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionRequest::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionRequest::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionRequest::clear_protocolversion() {
  protocolversion_ = 1;
  clear_has_protocolversion();
}
inline ::google::protobuf::int32 ConnectionRequest::protocolversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
  return protocolversion_;
}
inline void ConnectionRequest::set_protocolversion(::google::protobuf::int32 value) {
  set_has_protocolversion();
  protocolversion_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
}

// required string speechkitVersion = 2;
inline bool ConnectionRequest::has_speechkitversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionRequest::set_has_speechkitversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionRequest::clear_has_speechkitversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionRequest::clear_speechkitversion() {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_->clear();
  }
  clear_has_speechkitversion();
}
inline const ::std::string& ConnectionRequest::speechkitversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return *speechkitversion_;
}
inline void ConnectionRequest::set_speechkitversion(const ::std::string& value) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value, size_t size) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline ::std::string* ConnectionRequest::mutable_speechkitversion() {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return speechkitversion_;
}
inline ::std::string* ConnectionRequest::release_speechkitversion() {
  clear_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = speechkitversion_;
    speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_speechkitversion(::std::string* speechkitversion) {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete speechkitversion_;
  }
  if (speechkitversion) {
    set_has_speechkitversion();
    speechkitversion_ = speechkitversion;
  } else {
    clear_has_speechkitversion();
    speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}

// required string serviceName = 3;
inline bool ConnectionRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionRequest::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& ConnectionRequest::servicename() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return *servicename_;
}
inline void ConnectionRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline ::std::string* ConnectionRequest::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return servicename_;
}
inline ::std::string* ConnectionRequest::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}

// required string uuid = 4;
inline bool ConnectionRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionRequest::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ConnectionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return *uuid_;
}
inline void ConnectionRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline ::std::string* ConnectionRequest::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return uuid_;
}
inline ::std::string* ConnectionRequest::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.uuid)
}

// required string apiKey = 5;
inline bool ConnectionRequest::has_apikey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionRequest::set_has_apikey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionRequest::clear_has_apikey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionRequest::clear_apikey() {
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_->clear();
  }
  clear_has_apikey();
}
inline const ::std::string& ConnectionRequest::apikey() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return *apikey_;
}
inline void ConnectionRequest::set_apikey(const ::std::string& value) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value, size_t size) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline ::std::string* ConnectionRequest::mutable_apikey() {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return apikey_;
}
inline ::std::string* ConnectionRequest::release_apikey() {
  clear_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apikey_;
    apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_apikey(::std::string* apikey) {
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apikey_;
  }
  if (apikey) {
    set_has_apikey();
    apikey_ = apikey;
  } else {
    clear_has_apikey();
    apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}

// required string applicationName = 6;
inline bool ConnectionRequest::has_applicationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectionRequest::set_has_applicationname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectionRequest::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectionRequest::clear_applicationname() {
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_->clear();
  }
  clear_has_applicationname();
}
inline const ::std::string& ConnectionRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return *applicationname_;
}
inline void ConnectionRequest::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value, size_t size) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline ::std::string* ConnectionRequest::mutable_applicationname() {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return applicationname_;
}
inline ::std::string* ConnectionRequest::release_applicationname() {
  clear_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = applicationname_;
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applicationname_;
  }
  if (applicationname) {
    set_has_applicationname();
    applicationname_ = applicationname;
  } else {
    clear_has_applicationname();
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}

// required string device = 7;
inline bool ConnectionRequest::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConnectionRequest::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConnectionRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConnectionRequest::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& ConnectionRequest::device() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.device)
  return *device_;
}
inline void ConnectionRequest::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline ::std::string* ConnectionRequest::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.device)
  return device_;
}
inline ::std::string* ConnectionRequest::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.device)
}

// required string coords = 8;
inline bool ConnectionRequest::has_coords() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConnectionRequest::set_has_coords() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConnectionRequest::clear_has_coords() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConnectionRequest::clear_coords() {
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_->clear();
  }
  clear_has_coords();
}
inline const ::std::string& ConnectionRequest::coords() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.coords)
  return *coords_;
}
inline void ConnectionRequest::set_coords(const ::std::string& value) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value, size_t size) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline ::std::string* ConnectionRequest::mutable_coords() {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.coords)
  return coords_;
}
inline ::std::string* ConnectionRequest::release_coords() {
  clear_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = coords_;
    coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_coords(::std::string* coords) {
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coords_;
  }
  if (coords) {
    set_has_coords();
    coords_ = coords;
  } else {
    clear_has_coords();
    coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.coords)
}

// required string topic = 9;
inline bool ConnectionRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConnectionRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConnectionRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConnectionRequest::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& ConnectionRequest::topic() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.topic)
  return *topic_;
}
inline void ConnectionRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline ::std::string* ConnectionRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.topic)
  return topic_;
}
inline ::std::string* ConnectionRequest::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.topic)
}

// required string lang = 10;
inline bool ConnectionRequest::has_lang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConnectionRequest::set_has_lang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConnectionRequest::clear_has_lang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConnectionRequest::clear_lang() {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& ConnectionRequest::lang() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.lang)
  return *lang_;
}
inline void ConnectionRequest::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline ::std::string* ConnectionRequest::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.lang)
  return lang_;
}
inline ::std::string* ConnectionRequest::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.lang)
}

// required string format = 11;
inline bool ConnectionRequest::has_format() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConnectionRequest::set_has_format() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConnectionRequest::clear_has_format() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConnectionRequest::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& ConnectionRequest::format() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.format)
  return *format_;
}
inline void ConnectionRequest::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline ::std::string* ConnectionRequest::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.format)
  return format_;
}
inline ::std::string* ConnectionRequest::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.format)
}

// optional bool punctuation = 12 [default = true];
inline bool ConnectionRequest::has_punctuation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConnectionRequest::set_has_punctuation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConnectionRequest::clear_has_punctuation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConnectionRequest::clear_punctuation() {
  punctuation_ = true;
  clear_has_punctuation();
}
inline bool ConnectionRequest::punctuation() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.punctuation)
  return punctuation_;
}
inline void ConnectionRequest::set_punctuation(bool value) {
  set_has_punctuation();
  punctuation_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.punctuation)
}

// optional .VoiceProxyProtobuf.MusicRequest musicRequest = 17;
inline bool ConnectionRequest::has_musicrequest() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConnectionRequest::set_has_musicrequest() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConnectionRequest::clear_has_musicrequest() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConnectionRequest::clear_musicrequest() {
  if (musicrequest_ != NULL) musicrequest_->::VoiceProxyProtobuf::MusicRequest::Clear();
  clear_has_musicrequest();
}
inline const ::VoiceProxyProtobuf::MusicRequest& ConnectionRequest::musicrequest() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.musicRequest)
  return musicrequest_ != NULL ? *musicrequest_ : *default_instance_->musicrequest_;
}
inline ::VoiceProxyProtobuf::MusicRequest* ConnectionRequest::mutable_musicrequest() {
  set_has_musicrequest();
  if (musicrequest_ == NULL) musicrequest_ = new ::VoiceProxyProtobuf::MusicRequest;
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.musicRequest)
  return musicrequest_;
}
inline ::VoiceProxyProtobuf::MusicRequest* ConnectionRequest::release_musicrequest() {
  clear_has_musicrequest();
  ::VoiceProxyProtobuf::MusicRequest* temp = musicrequest_;
  musicrequest_ = NULL;
  return temp;
}
inline void ConnectionRequest::set_allocated_musicrequest(::VoiceProxyProtobuf::MusicRequest* musicrequest) {
  delete musicrequest_;
  musicrequest_ = musicrequest;
  if (musicrequest) {
    set_has_musicrequest();
  } else {
    clear_has_musicrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.musicRequest)
}

// optional bool disableAntimatNormalizer = 18 [default = false];
inline bool ConnectionRequest::has_disableantimatnormalizer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConnectionRequest::set_has_disableantimatnormalizer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConnectionRequest::clear_has_disableantimatnormalizer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConnectionRequest::clear_disableantimatnormalizer() {
  disableantimatnormalizer_ = false;
  clear_has_disableantimatnormalizer();
}
inline bool ConnectionRequest::disableantimatnormalizer() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.disableAntimatNormalizer)
  return disableantimatnormalizer_;
}
inline void ConnectionRequest::set_disableantimatnormalizer(bool value) {
  set_has_disableantimatnormalizer();
  disableantimatnormalizer_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.disableAntimatNormalizer)
}

// optional .VoiceProxyProtobuf.AdvancedASROptions advancedASROptions = 19;
inline bool ConnectionRequest::has_advancedasroptions() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConnectionRequest::set_has_advancedasroptions() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConnectionRequest::clear_has_advancedasroptions() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConnectionRequest::clear_advancedasroptions() {
  if (advancedasroptions_ != NULL) advancedasroptions_->::VoiceProxyProtobuf::AdvancedASROptions::Clear();
  clear_has_advancedasroptions();
}
inline const ::VoiceProxyProtobuf::AdvancedASROptions& ConnectionRequest::advancedasroptions() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.advancedASROptions)
  return advancedasroptions_ != NULL ? *advancedasroptions_ : *default_instance_->advancedasroptions_;
}
inline ::VoiceProxyProtobuf::AdvancedASROptions* ConnectionRequest::mutable_advancedasroptions() {
  set_has_advancedasroptions();
  if (advancedasroptions_ == NULL) advancedasroptions_ = new ::VoiceProxyProtobuf::AdvancedASROptions;
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.advancedASROptions)
  return advancedasroptions_;
}
inline ::VoiceProxyProtobuf::AdvancedASROptions* ConnectionRequest::release_advancedasroptions() {
  clear_has_advancedasroptions();
  ::VoiceProxyProtobuf::AdvancedASROptions* temp = advancedasroptions_;
  advancedasroptions_ = NULL;
  return temp;
}
inline void ConnectionRequest::set_allocated_advancedasroptions(::VoiceProxyProtobuf::AdvancedASROptions* advancedasroptions) {
  delete advancedasroptions_;
  advancedasroptions_ = advancedasroptions;
  if (advancedasroptions) {
    set_has_advancedasroptions();
  } else {
    clear_has_advancedasroptions();
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.advancedASROptions)
}

// optional bool skipAudioFromLogging = 20 [default = false];
inline bool ConnectionRequest::has_skipaudiofromlogging() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConnectionRequest::set_has_skipaudiofromlogging() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConnectionRequest::clear_has_skipaudiofromlogging() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConnectionRequest::clear_skipaudiofromlogging() {
  skipaudiofromlogging_ = false;
  clear_has_skipaudiofromlogging();
}
inline bool ConnectionRequest::skipaudiofromlogging() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.skipAudioFromLogging)
  return skipaudiofromlogging_;
}
inline void ConnectionRequest::set_skipaudiofromlogging(bool value) {
  set_has_skipaudiofromlogging();
  skipaudiofromlogging_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.skipAudioFromLogging)
}

// -------------------------------------------------------------------

// AddData

// optional bytes audioData = 1;
inline bool AddData::has_audiodata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddData::set_has_audiodata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddData::clear_has_audiodata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddData::clear_audiodata() {
  if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_->clear();
  }
  clear_has_audiodata();
}
inline const ::std::string& AddData::audiodata() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.audioData)
  return *audiodata_;
}
inline void AddData::set_audiodata(const ::std::string& value) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.audioData)
}
inline void AddData::set_audiodata(const char* value) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AddData.audioData)
}
inline void AddData::set_audiodata(const void* value, size_t size) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AddData.audioData)
}
inline ::std::string* AddData::mutable_audiodata() {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddData.audioData)
  return audiodata_;
}
inline ::std::string* AddData::release_audiodata() {
  clear_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = audiodata_;
    audiodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddData::set_allocated_audiodata(::std::string* audiodata) {
  if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audiodata_;
  }
  if (audiodata) {
    set_has_audiodata();
    audiodata_ = audiodata;
  } else {
    clear_has_audiodata();
    audiodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AddData.audioData)
}

// required bool lastChunk = 2;
inline bool AddData::has_lastchunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddData::set_has_lastchunk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddData::clear_has_lastchunk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddData::clear_lastchunk() {
  lastchunk_ = false;
  clear_has_lastchunk();
}
inline bool AddData::lastchunk() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.lastChunk)
  return lastchunk_;
}
inline void AddData::set_lastchunk(bool value) {
  set_has_lastchunk();
  lastchunk_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.lastChunk)
}

// -------------------------------------------------------------------

// AlignInfo

// optional float start_time = 1;
inline bool AlignInfo::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlignInfo::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlignInfo::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlignInfo::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline float AlignInfo::start_time() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.start_time)
  return start_time_;
}
inline void AlignInfo::set_start_time(float value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.start_time)
}

// optional float end_time = 2;
inline bool AlignInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlignInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlignInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlignInfo::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline float AlignInfo::end_time() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.end_time)
  return end_time_;
}
inline void AlignInfo::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.end_time)
}

// optional float acoustic_score = 3;
inline bool AlignInfo::has_acoustic_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlignInfo::set_has_acoustic_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlignInfo::clear_has_acoustic_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlignInfo::clear_acoustic_score() {
  acoustic_score_ = 0;
  clear_has_acoustic_score();
}
inline float AlignInfo::acoustic_score() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.acoustic_score)
  return acoustic_score_;
}
inline void AlignInfo::set_acoustic_score(float value) {
  set_has_acoustic_score();
  acoustic_score_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.acoustic_score)
}

// optional float graph_score = 4;
inline bool AlignInfo::has_graph_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlignInfo::set_has_graph_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlignInfo::clear_has_graph_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlignInfo::clear_graph_score() {
  graph_score_ = 0;
  clear_has_graph_score();
}
inline float AlignInfo::graph_score() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.graph_score)
  return graph_score_;
}
inline void AlignInfo::set_graph_score(float value) {
  set_has_graph_score();
  graph_score_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.graph_score)
}

// optional float lm_score = 5;
inline bool AlignInfo::has_lm_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlignInfo::set_has_lm_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlignInfo::clear_has_lm_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlignInfo::clear_lm_score() {
  lm_score_ = 0;
  clear_has_lm_score();
}
inline float AlignInfo::lm_score() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.lm_score)
  return lm_score_;
}
inline void AlignInfo::set_lm_score(float value) {
  set_has_lm_score();
  lm_score_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.lm_score)
}

// optional float total_score = 6;
inline bool AlignInfo::has_total_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlignInfo::set_has_total_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlignInfo::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlignInfo::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline float AlignInfo::total_score() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AlignInfo.total_score)
  return total_score_;
}
inline void AlignInfo::set_total_score(float value) {
  set_has_total_score();
  total_score_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AlignInfo.total_score)
}

// -------------------------------------------------------------------

// Word

// required float confidence = 1;
inline bool Word::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Word::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Word::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Word::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Word::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.confidence)
  return confidence_;
}
inline void Word::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.confidence)
}

// required string value = 2;
inline bool Word::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Word::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Word::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Word::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Word::value() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.value)
  return *value_;
}
inline void Word::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.value)
}
inline void Word::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Word.value)
}
inline void Word::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Word.value)
}
inline ::std::string* Word::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Word.value)
  return value_;
}
inline ::std::string* Word::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Word::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Word.value)
}

// optional .VoiceProxyProtobuf.AlignInfo align_info = 3;
inline bool Word::has_align_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Word::set_has_align_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Word::clear_has_align_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Word::clear_align_info() {
  if (align_info_ != NULL) align_info_->::VoiceProxyProtobuf::AlignInfo::Clear();
  clear_has_align_info();
}
inline const ::VoiceProxyProtobuf::AlignInfo& Word::align_info() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.align_info)
  return align_info_ != NULL ? *align_info_ : *default_instance_->align_info_;
}
inline ::VoiceProxyProtobuf::AlignInfo* Word::mutable_align_info() {
  set_has_align_info();
  if (align_info_ == NULL) align_info_ = new ::VoiceProxyProtobuf::AlignInfo;
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Word.align_info)
  return align_info_;
}
inline ::VoiceProxyProtobuf::AlignInfo* Word::release_align_info() {
  clear_has_align_info();
  ::VoiceProxyProtobuf::AlignInfo* temp = align_info_;
  align_info_ = NULL;
  return temp;
}
inline void Word::set_allocated_align_info(::VoiceProxyProtobuf::AlignInfo* align_info) {
  delete align_info_;
  align_info_ = align_info;
  if (align_info) {
    set_has_align_info();
  } else {
    clear_has_align_info();
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Word.align_info)
}

// -------------------------------------------------------------------

// Result

// required float confidence = 1;
inline bool Result::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Result::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.confidence)
  return confidence_;
}
inline void Result::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.confidence)
}

// repeated .VoiceProxyProtobuf.Word words = 2;
inline int Result::words_size() const {
  return words_.size();
}
inline void Result::clear_words() {
  words_.Clear();
}
inline const ::VoiceProxyProtobuf::Word& Result::words(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.words)
  return words_.Get(index);
}
inline ::VoiceProxyProtobuf::Word* Result::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.words)
  return words_.Mutable(index);
}
inline ::VoiceProxyProtobuf::Word* Result::add_words() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.Result.words)
  return words_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >&
Result::words() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.Result.words)
  return words_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >*
Result::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.Result.words)
  return &words_;
}

// optional string normalized = 3;
inline bool Result::has_normalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_normalized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_normalized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_normalized() {
  if (normalized_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    normalized_->clear();
  }
  clear_has_normalized();
}
inline const ::std::string& Result::normalized() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.normalized)
  return *normalized_;
}
inline void Result::set_normalized(const ::std::string& value) {
  set_has_normalized();
  if (normalized_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    normalized_ = new ::std::string;
  }
  normalized_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.normalized)
}
inline void Result::set_normalized(const char* value) {
  set_has_normalized();
  if (normalized_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    normalized_ = new ::std::string;
  }
  normalized_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Result.normalized)
}
inline void Result::set_normalized(const char* value, size_t size) {
  set_has_normalized();
  if (normalized_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    normalized_ = new ::std::string;
  }
  normalized_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Result.normalized)
}
inline ::std::string* Result::mutable_normalized() {
  set_has_normalized();
  if (normalized_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    normalized_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.normalized)
  return normalized_;
}
inline ::std::string* Result::release_normalized() {
  clear_has_normalized();
  if (normalized_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = normalized_;
    normalized_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_normalized(::std::string* normalized) {
  if (normalized_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete normalized_;
  }
  if (normalized) {
    set_has_normalized();
    normalized_ = normalized;
  } else {
    clear_has_normalized();
    normalized_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Result.normalized)
}

// optional .VoiceProxyProtobuf.AlignInfo align_info = 4;
inline bool Result::has_align_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_align_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_align_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_align_info() {
  if (align_info_ != NULL) align_info_->::VoiceProxyProtobuf::AlignInfo::Clear();
  clear_has_align_info();
}
inline const ::VoiceProxyProtobuf::AlignInfo& Result::align_info() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.align_info)
  return align_info_ != NULL ? *align_info_ : *default_instance_->align_info_;
}
inline ::VoiceProxyProtobuf::AlignInfo* Result::mutable_align_info() {
  set_has_align_info();
  if (align_info_ == NULL) align_info_ = new ::VoiceProxyProtobuf::AlignInfo;
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.align_info)
  return align_info_;
}
inline ::VoiceProxyProtobuf::AlignInfo* Result::release_align_info() {
  clear_has_align_info();
  ::VoiceProxyProtobuf::AlignInfo* temp = align_info_;
  align_info_ = NULL;
  return temp;
}
inline void Result::set_allocated_align_info(::VoiceProxyProtobuf::AlignInfo* align_info) {
  delete align_info_;
  align_info_ = align_info;
  if (align_info) {
    set_has_align_info();
  } else {
    clear_has_align_info();
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Result.align_info)
}

// -------------------------------------------------------------------

// BiometryResult

// required string classname = 1;
inline bool BiometryResult::has_classname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiometryResult::set_has_classname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiometryResult::clear_has_classname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiometryResult::clear_classname() {
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classname_->clear();
  }
  clear_has_classname();
}
inline const ::std::string& BiometryResult::classname() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.BiometryResult.classname)
  return *classname_;
}
inline void BiometryResult::set_classname(const ::std::string& value) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classname_ = new ::std::string;
  }
  classname_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.BiometryResult.classname)
}
inline void BiometryResult::set_classname(const char* value) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classname_ = new ::std::string;
  }
  classname_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.BiometryResult.classname)
}
inline void BiometryResult::set_classname(const char* value, size_t size) {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classname_ = new ::std::string;
  }
  classname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.BiometryResult.classname)
}
inline ::std::string* BiometryResult::mutable_classname() {
  set_has_classname();
  if (classname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.BiometryResult.classname)
  return classname_;
}
inline ::std::string* BiometryResult::release_classname() {
  clear_has_classname();
  if (classname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = classname_;
    classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BiometryResult::set_allocated_classname(::std::string* classname) {
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  if (classname) {
    set_has_classname();
    classname_ = classname;
  } else {
    clear_has_classname();
    classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.BiometryResult.classname)
}

// required float confidence = 2;
inline bool BiometryResult::has_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiometryResult::set_has_confidence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiometryResult::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiometryResult::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float BiometryResult::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.BiometryResult.confidence)
  return confidence_;
}
inline void BiometryResult::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.BiometryResult.confidence)
}

// optional string tag = 3;
inline bool BiometryResult::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiometryResult::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiometryResult::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiometryResult::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& BiometryResult::tag() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.BiometryResult.tag)
  return *tag_;
}
inline void BiometryResult::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.BiometryResult.tag)
}
inline void BiometryResult::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.BiometryResult.tag)
}
inline void BiometryResult::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.BiometryResult.tag)
}
inline ::std::string* BiometryResult::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.BiometryResult.tag)
  return tag_;
}
inline ::std::string* BiometryResult::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BiometryResult::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.BiometryResult.tag)
}

// -------------------------------------------------------------------

// AddDataResponse

// required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
inline bool AddDataResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddDataResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddDataResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddDataResponse::clear_responsecode() {
  responsecode_ = 200;
  clear_has_responsecode();
}
inline ::BasicProtobuf::ConnectionResponse_ResponseCode AddDataResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.responseCode)
  return static_cast< ::BasicProtobuf::ConnectionResponse_ResponseCode >(responsecode_);
}
inline void AddDataResponse::set_responsecode(::BasicProtobuf::ConnectionResponse_ResponseCode value) {
  assert(::BasicProtobuf::ConnectionResponse_ResponseCode_IsValid(value));
  set_has_responsecode();
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.responseCode)
}

// repeated .VoiceProxyProtobuf.Result recognition = 2;
inline int AddDataResponse::recognition_size() const {
  return recognition_.size();
}
inline void AddDataResponse::clear_recognition() {
  recognition_.Clear();
}
inline const ::VoiceProxyProtobuf::Result& AddDataResponse::recognition(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Get(index);
}
inline ::VoiceProxyProtobuf::Result* AddDataResponse::mutable_recognition(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Mutable(index);
}
inline ::VoiceProxyProtobuf::Result* AddDataResponse::add_recognition() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >&
AddDataResponse::recognition() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >*
AddDataResponse::mutable_recognition() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return &recognition_;
}

// optional bool endOfUtt = 3 [default = false];
inline bool AddDataResponse::has_endofutt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddDataResponse::set_has_endofutt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddDataResponse::clear_has_endofutt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddDataResponse::clear_endofutt() {
  endofutt_ = false;
  clear_has_endofutt();
}
inline bool AddDataResponse::endofutt() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
  return endofutt_;
}
inline void AddDataResponse::set_endofutt(bool value) {
  set_has_endofutt();
  endofutt_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
}

// optional int32 messagesCount = 4 [default = 1];
inline bool AddDataResponse::has_messagescount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddDataResponse::set_has_messagescount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddDataResponse::clear_has_messagescount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddDataResponse::clear_messagescount() {
  messagescount_ = 1;
  clear_has_messagescount();
}
inline ::google::protobuf::int32 AddDataResponse::messagescount() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.messagesCount)
  return messagescount_;
}
inline void AddDataResponse::set_messagescount(::google::protobuf::int32 value) {
  set_has_messagescount();
  messagescount_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.messagesCount)
}

// optional string musicProxyResponse = 5;
inline bool AddDataResponse::has_musicproxyresponse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddDataResponse::set_has_musicproxyresponse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddDataResponse::clear_has_musicproxyresponse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddDataResponse::clear_musicproxyresponse() {
  if (musicproxyresponse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musicproxyresponse_->clear();
  }
  clear_has_musicproxyresponse();
}
inline const ::std::string& AddDataResponse::musicproxyresponse() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
  return *musicproxyresponse_;
}
inline void AddDataResponse::set_musicproxyresponse(const ::std::string& value) {
  set_has_musicproxyresponse();
  if (musicproxyresponse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musicproxyresponse_ = new ::std::string;
  }
  musicproxyresponse_->assign(value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
}
inline void AddDataResponse::set_musicproxyresponse(const char* value) {
  set_has_musicproxyresponse();
  if (musicproxyresponse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musicproxyresponse_ = new ::std::string;
  }
  musicproxyresponse_->assign(value);
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
}
inline void AddDataResponse::set_musicproxyresponse(const char* value, size_t size) {
  set_has_musicproxyresponse();
  if (musicproxyresponse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musicproxyresponse_ = new ::std::string;
  }
  musicproxyresponse_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
}
inline ::std::string* AddDataResponse::mutable_musicproxyresponse() {
  set_has_musicproxyresponse();
  if (musicproxyresponse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musicproxyresponse_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
  return musicproxyresponse_;
}
inline ::std::string* AddDataResponse::release_musicproxyresponse() {
  clear_has_musicproxyresponse();
  if (musicproxyresponse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = musicproxyresponse_;
    musicproxyresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddDataResponse::set_allocated_musicproxyresponse(::std::string* musicproxyresponse) {
  if (musicproxyresponse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete musicproxyresponse_;
  }
  if (musicproxyresponse) {
    set_has_musicproxyresponse();
    musicproxyresponse_ = musicproxyresponse;
  } else {
    clear_has_musicproxyresponse();
    musicproxyresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AddDataResponse.musicProxyResponse)
}

// repeated .VoiceProxyProtobuf.BiometryResult bioResult = 6;
inline int AddDataResponse::bioresult_size() const {
  return bioresult_.size();
}
inline void AddDataResponse::clear_bioresult() {
  bioresult_.Clear();
}
inline const ::VoiceProxyProtobuf::BiometryResult& AddDataResponse::bioresult(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.bioResult)
  return bioresult_.Get(index);
}
inline ::VoiceProxyProtobuf::BiometryResult* AddDataResponse::mutable_bioresult(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddDataResponse.bioResult)
  return bioresult_.Mutable(index);
}
inline ::VoiceProxyProtobuf::BiometryResult* AddDataResponse::add_bioresult() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.AddDataResponse.bioResult)
  return bioresult_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::BiometryResult >&
AddDataResponse::bioresult() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.AddDataResponse.bioResult)
  return bioresult_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::BiometryResult >*
AddDataResponse::mutable_bioresult() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.AddDataResponse.bioResult)
  return &bioresult_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceProxyProtobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_voiceproxy_2eproto__INCLUDED
