// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionRequest.proto

#ifndef PROTOBUF_ConnectionRequest_2eproto__INCLUDED
#define PROTOBUF_ConnectionRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Jarvis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConnectionRequest_2eproto();
void protobuf_AssignDesc_ConnectionRequest_2eproto();
void protobuf_ShutdownFile_ConnectionRequest_2eproto();

class ConnectionRequest;

// ===================================================================

class ConnectionRequest : public ::google::protobuf::Message {
 public:
  ConnectionRequest();
  virtual ~ConnectionRequest();

  ConnectionRequest(const ConnectionRequest& from);

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionRequest& default_instance();

  void Swap(ConnectionRequest* other);

  // implements Message ----------------------------------------------

  ConnectionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionRequest& from);
  void MergeFrom(const ConnectionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protocolVersion = 1 [default = 1];
  inline bool has_protocolversion() const;
  inline void clear_protocolversion();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocolversion() const;
  inline void set_protocolversion(::google::protobuf::int32 value);

  // required string speechkitVersion = 2;
  inline bool has_speechkitversion() const;
  inline void clear_speechkitversion();
  static const int kSpeechkitVersionFieldNumber = 2;
  inline const ::std::string& speechkitversion() const;
  inline void set_speechkitversion(const ::std::string& value);
  inline void set_speechkitversion(const char* value);
  inline void set_speechkitversion(const char* value, size_t size);
  inline ::std::string* mutable_speechkitversion();
  inline ::std::string* release_speechkitversion();
  inline void set_allocated_speechkitversion(::std::string* speechkitversion);

  // required string serviceName = 3;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // required string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string apiKey = 5;
  inline bool has_apikey() const;
  inline void clear_apikey();
  static const int kApiKeyFieldNumber = 5;
  inline const ::std::string& apikey() const;
  inline void set_apikey(const ::std::string& value);
  inline void set_apikey(const char* value);
  inline void set_apikey(const char* value, size_t size);
  inline ::std::string* mutable_apikey();
  inline ::std::string* release_apikey();
  inline void set_allocated_apikey(::std::string* apikey);

  // required string applicationName = 6;
  inline bool has_applicationname() const;
  inline void clear_applicationname();
  static const int kApplicationNameFieldNumber = 6;
  inline const ::std::string& applicationname() const;
  inline void set_applicationname(const ::std::string& value);
  inline void set_applicationname(const char* value);
  inline void set_applicationname(const char* value, size_t size);
  inline ::std::string* mutable_applicationname();
  inline ::std::string* release_applicationname();
  inline void set_allocated_applicationname(::std::string* applicationname);

  // required string device = 7;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 7;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // required string coords = 8;
  inline bool has_coords() const;
  inline void clear_coords();
  static const int kCoordsFieldNumber = 8;
  inline const ::std::string& coords() const;
  inline void set_coords(const ::std::string& value);
  inline void set_coords(const char* value);
  inline void set_coords(const char* value, size_t size);
  inline ::std::string* mutable_coords();
  inline ::std::string* release_coords();
  inline void set_allocated_coords(::std::string* coords);

  // required string topic = 9;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 9;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required string lang = 10;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 10;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // required string format = 11;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 11;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // optional bool punctuation = 12 [default = true];
  inline bool has_punctuation() const;
  inline void clear_punctuation();
  static const int kPunctuationFieldNumber = 12;
  inline bool punctuation() const;
  inline void set_punctuation(bool value);

  // @@protoc_insertion_point(class_scope:Jarvis.ConnectionRequest)
 private:
  inline void set_has_protocolversion();
  inline void clear_has_protocolversion();
  inline void set_has_speechkitversion();
  inline void clear_has_speechkitversion();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_apikey();
  inline void clear_has_apikey();
  inline void set_has_applicationname();
  inline void clear_has_applicationname();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_coords();
  inline void clear_has_coords();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_punctuation();
  inline void clear_has_punctuation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* speechkitversion_;
  ::std::string* servicename_;
  ::std::string* uuid_;
  ::std::string* apikey_;
  ::std::string* applicationname_;
  ::google::protobuf::int32 protocolversion_;
  bool punctuation_;
  ::std::string* device_;
  ::std::string* coords_;
  ::std::string* topic_;
  ::std::string* lang_;
  ::std::string* format_;
  friend void  protobuf_AddDesc_ConnectionRequest_2eproto();
  friend void protobuf_AssignDesc_ConnectionRequest_2eproto();
  friend void protobuf_ShutdownFile_ConnectionRequest_2eproto();

  void InitAsDefaultInstance();
  static ConnectionRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ConnectionRequest

// optional int32 protocolVersion = 1 [default = 1];
inline bool ConnectionRequest::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionRequest::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionRequest::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionRequest::clear_protocolversion() {
  protocolversion_ = 1;
  clear_has_protocolversion();
}
inline ::google::protobuf::int32 ConnectionRequest::protocolversion() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.protocolVersion)
  return protocolversion_;
}
inline void ConnectionRequest::set_protocolversion(::google::protobuf::int32 value) {
  set_has_protocolversion();
  protocolversion_ = value;
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.protocolVersion)
}

// required string speechkitVersion = 2;
inline bool ConnectionRequest::has_speechkitversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionRequest::set_has_speechkitversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionRequest::clear_has_speechkitversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionRequest::clear_speechkitversion() {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_->clear();
  }
  clear_has_speechkitversion();
}
inline const ::std::string& ConnectionRequest::speechkitversion() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.speechkitVersion)
  return *speechkitversion_;
}
inline void ConnectionRequest::set_speechkitversion(const ::std::string& value) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value, size_t size) {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  speechkitversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.speechkitVersion)
}
inline ::std::string* ConnectionRequest::mutable_speechkitversion() {
  set_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    speechkitversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.speechkitVersion)
  return speechkitversion_;
}
inline ::std::string* ConnectionRequest::release_speechkitversion() {
  clear_has_speechkitversion();
  if (speechkitversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = speechkitversion_;
    speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_speechkitversion(::std::string* speechkitversion) {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete speechkitversion_;
  }
  if (speechkitversion) {
    set_has_speechkitversion();
    speechkitversion_ = speechkitversion;
  } else {
    clear_has_speechkitversion();
    speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.speechkitVersion)
}

// required string serviceName = 3;
inline bool ConnectionRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionRequest::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& ConnectionRequest::servicename() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.serviceName)
  return *servicename_;
}
inline void ConnectionRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.serviceName)
}
inline ::std::string* ConnectionRequest::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servicename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.serviceName)
  return servicename_;
}
inline ::std::string* ConnectionRequest::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.serviceName)
}

// required string uuid = 4;
inline bool ConnectionRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionRequest::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ConnectionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.uuid)
  return *uuid_;
}
inline void ConnectionRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.uuid)
}
inline ::std::string* ConnectionRequest::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.uuid)
  return uuid_;
}
inline ::std::string* ConnectionRequest::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.uuid)
}

// required string apiKey = 5;
inline bool ConnectionRequest::has_apikey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionRequest::set_has_apikey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionRequest::clear_has_apikey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionRequest::clear_apikey() {
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_->clear();
  }
  clear_has_apikey();
}
inline const ::std::string& ConnectionRequest::apikey() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.apiKey)
  return *apikey_;
}
inline void ConnectionRequest::set_apikey(const ::std::string& value) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value, size_t size) {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  apikey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.apiKey)
}
inline ::std::string* ConnectionRequest::mutable_apikey() {
  set_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apikey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.apiKey)
  return apikey_;
}
inline ::std::string* ConnectionRequest::release_apikey() {
  clear_has_apikey();
  if (apikey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apikey_;
    apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_apikey(::std::string* apikey) {
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apikey_;
  }
  if (apikey) {
    set_has_apikey();
    apikey_ = apikey;
  } else {
    clear_has_apikey();
    apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.apiKey)
}

// required string applicationName = 6;
inline bool ConnectionRequest::has_applicationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectionRequest::set_has_applicationname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectionRequest::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectionRequest::clear_applicationname() {
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_->clear();
  }
  clear_has_applicationname();
}
inline const ::std::string& ConnectionRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.applicationName)
  return *applicationname_;
}
inline void ConnectionRequest::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value, size_t size) {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  applicationname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.applicationName)
}
inline ::std::string* ConnectionRequest::mutable_applicationname() {
  set_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    applicationname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.applicationName)
  return applicationname_;
}
inline ::std::string* ConnectionRequest::release_applicationname() {
  clear_has_applicationname();
  if (applicationname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = applicationname_;
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applicationname_;
  }
  if (applicationname) {
    set_has_applicationname();
    applicationname_ = applicationname;
  } else {
    clear_has_applicationname();
    applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.applicationName)
}

// required string device = 7;
inline bool ConnectionRequest::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConnectionRequest::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConnectionRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConnectionRequest::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& ConnectionRequest::device() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.device)
  return *device_;
}
inline void ConnectionRequest::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.device)
}
inline ::std::string* ConnectionRequest::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.device)
  return device_;
}
inline ::std::string* ConnectionRequest::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.device)
}

// required string coords = 8;
inline bool ConnectionRequest::has_coords() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConnectionRequest::set_has_coords() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConnectionRequest::clear_has_coords() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConnectionRequest::clear_coords() {
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_->clear();
  }
  clear_has_coords();
}
inline const ::std::string& ConnectionRequest::coords() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.coords)
  return *coords_;
}
inline void ConnectionRequest::set_coords(const ::std::string& value) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value, size_t size) {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  coords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.coords)
}
inline ::std::string* ConnectionRequest::mutable_coords() {
  set_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.coords)
  return coords_;
}
inline ::std::string* ConnectionRequest::release_coords() {
  clear_has_coords();
  if (coords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = coords_;
    coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_coords(::std::string* coords) {
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coords_;
  }
  if (coords) {
    set_has_coords();
    coords_ = coords;
  } else {
    clear_has_coords();
    coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.coords)
}

// required string topic = 9;
inline bool ConnectionRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConnectionRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConnectionRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConnectionRequest::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& ConnectionRequest::topic() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.topic)
  return *topic_;
}
inline void ConnectionRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.topic)
}
inline ::std::string* ConnectionRequest::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.topic)
  return topic_;
}
inline ::std::string* ConnectionRequest::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.topic)
}

// required string lang = 10;
inline bool ConnectionRequest::has_lang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConnectionRequest::set_has_lang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConnectionRequest::clear_has_lang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConnectionRequest::clear_lang() {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& ConnectionRequest::lang() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.lang)
  return *lang_;
}
inline void ConnectionRequest::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.lang)
}
inline ::std::string* ConnectionRequest::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.lang)
  return lang_;
}
inline ::std::string* ConnectionRequest::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.lang)
}

// required string format = 11;
inline bool ConnectionRequest::has_format() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConnectionRequest::set_has_format() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConnectionRequest::clear_has_format() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConnectionRequest::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& ConnectionRequest::format() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.format)
  return *format_;
}
inline void ConnectionRequest::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.ConnectionRequest.format)
}
inline ::std::string* ConnectionRequest::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.ConnectionRequest.format)
  return format_;
}
inline ::std::string* ConnectionRequest::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectionRequest::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.ConnectionRequest.format)
}

// optional bool punctuation = 12 [default = true];
inline bool ConnectionRequest::has_punctuation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConnectionRequest::set_has_punctuation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConnectionRequest::clear_has_punctuation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConnectionRequest::clear_punctuation() {
  punctuation_ = true;
  clear_has_punctuation();
}
inline bool ConnectionRequest::punctuation() const {
  // @@protoc_insertion_point(field_get:Jarvis.ConnectionRequest.punctuation)
  return punctuation_;
}
inline void ConnectionRequest::set_punctuation(bool value) {
  set_has_punctuation();
  punctuation_ = value;
  // @@protoc_insertion_point(field_set:Jarvis.ConnectionRequest.punctuation)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Jarvis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConnectionRequest_2eproto__INCLUDED
