// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddData.proto

#ifndef PROTOBUF_AddData_2eproto__INCLUDED
#define PROTOBUF_AddData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Jarvis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AddData_2eproto();
void protobuf_AssignDesc_AddData_2eproto();
void protobuf_ShutdownFile_AddData_2eproto();

class AddData;

// ===================================================================

class AddData : public ::google::protobuf::Message {
 public:
  AddData();
  virtual ~AddData();

  AddData(const AddData& from);

  inline AddData& operator=(const AddData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddData& default_instance();

  void Swap(AddData* other);

  // implements Message ----------------------------------------------

  AddData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddData& from);
  void MergeFrom(const AddData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audioData = 1;
  inline bool has_audiodata() const;
  inline void clear_audiodata();
  static const int kAudioDataFieldNumber = 1;
  inline const ::std::string& audiodata() const;
  inline void set_audiodata(const ::std::string& value);
  inline void set_audiodata(const char* value);
  inline void set_audiodata(const void* value, size_t size);
  inline ::std::string* mutable_audiodata();
  inline ::std::string* release_audiodata();
  inline void set_allocated_audiodata(::std::string* audiodata);

  // required bool lastChunk = 2;
  inline bool has_lastchunk() const;
  inline void clear_lastchunk();
  static const int kLastChunkFieldNumber = 2;
  inline bool lastchunk() const;
  inline void set_lastchunk(bool value);

  // @@protoc_insertion_point(class_scope:Jarvis.AddData)
 private:
  inline void set_has_audiodata();
  inline void clear_has_audiodata();
  inline void set_has_lastchunk();
  inline void clear_has_lastchunk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* audiodata_;
  bool lastchunk_;
  friend void  protobuf_AddDesc_AddData_2eproto();
  friend void protobuf_AssignDesc_AddData_2eproto();
  friend void protobuf_ShutdownFile_AddData_2eproto();

  void InitAsDefaultInstance();
  static AddData* default_instance_;
};
// ===================================================================


// ===================================================================

// AddData

// optional bytes audioData = 1;
inline bool AddData::has_audiodata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddData::set_has_audiodata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddData::clear_has_audiodata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddData::clear_audiodata() {
  if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_->clear();
  }
  clear_has_audiodata();
}
inline const ::std::string& AddData::audiodata() const {
  // @@protoc_insertion_point(field_get:Jarvis.AddData.audioData)
  return *audiodata_;
}
inline void AddData::set_audiodata(const ::std::string& value) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(value);
  // @@protoc_insertion_point(field_set:Jarvis.AddData.audioData)
}
inline void AddData::set_audiodata(const char* value) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:Jarvis.AddData.audioData)
}
inline void AddData::set_audiodata(const void* value, size_t size) {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  audiodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jarvis.AddData.audioData)
}
inline ::std::string* AddData::mutable_audiodata() {
  set_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    audiodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Jarvis.AddData.audioData)
  return audiodata_;
}
inline ::std::string* AddData::release_audiodata() {
  clear_has_audiodata();
  if (audiodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = audiodata_;
    audiodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddData::set_allocated_audiodata(::std::string* audiodata) {
  if (audiodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audiodata_;
  }
  if (audiodata) {
    set_has_audiodata();
    audiodata_ = audiodata;
  } else {
    clear_has_audiodata();
    audiodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Jarvis.AddData.audioData)
}

// required bool lastChunk = 2;
inline bool AddData::has_lastchunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddData::set_has_lastchunk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddData::clear_has_lastchunk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddData::clear_lastchunk() {
  lastchunk_ = false;
  clear_has_lastchunk();
}
inline bool AddData::lastchunk() const {
  // @@protoc_insertion_point(field_get:Jarvis.AddData.lastChunk)
  return lastchunk_;
}
inline void AddData::set_lastchunk(bool value) {
  set_has_lastchunk();
  lastchunk_ = value;
  // @@protoc_insertion_point(field_set:Jarvis.AddData.lastChunk)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Jarvis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AddData_2eproto__INCLUDED
