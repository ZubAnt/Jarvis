// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectionRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectionRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Jarvis {

namespace {

const ::google::protobuf::Descriptor* ConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectionRequest_2eproto() {
  protobuf_AddDesc_ConnectionRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectionRequest.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionRequest_descriptor_ = file->message_type(0);
  static const int ConnectionRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, speechkitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, apikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, applicationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, punctuation_),
  };
  ConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionRequest_descriptor_,
      ConnectionRequest::default_instance_,
      ConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectionRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionRequest_descriptor_, &ConnectionRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectionRequest_2eproto() {
  delete ConnectionRequest::default_instance_;
  delete ConnectionRequest_reflection_;
}

void protobuf_AddDesc_ConnectionRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ConnectionRequest.proto\022\006Jarvis\"\375\001\n\021Co"
    "nnectionRequest\022\032\n\017protocolVersion\030\001 \001(\005"
    ":\0011\022\030\n\020speechkitVersion\030\002 \002(\t\022\023\n\013service"
    "Name\030\003 \002(\t\022\014\n\004uuid\030\004 \002(\t\022\016\n\006apiKey\030\005 \002(\t"
    "\022\027\n\017applicationName\030\006 \002(\t\022\016\n\006device\030\007 \002("
    "\t\022\016\n\006coords\030\010 \002(\t\022\r\n\005topic\030\t \002(\t\022\014\n\004lang"
    "\030\n \002(\t\022\016\n\006format\030\013 \002(\t\022\031\n\013punctuation\030\014 "
    "\001(\010:\004true", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectionRequest.proto", &protobuf_RegisterTypes);
  ConnectionRequest::default_instance_ = new ConnectionRequest();
  ConnectionRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectionRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectionRequest_2eproto {
  StaticDescriptorInitializer_ConnectionRequest_2eproto() {
    protobuf_AddDesc_ConnectionRequest_2eproto();
  }
} static_descriptor_initializer_ConnectionRequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConnectionRequest::kProtocolVersionFieldNumber;
const int ConnectionRequest::kSpeechkitVersionFieldNumber;
const int ConnectionRequest::kServiceNameFieldNumber;
const int ConnectionRequest::kUuidFieldNumber;
const int ConnectionRequest::kApiKeyFieldNumber;
const int ConnectionRequest::kApplicationNameFieldNumber;
const int ConnectionRequest::kDeviceFieldNumber;
const int ConnectionRequest::kCoordsFieldNumber;
const int ConnectionRequest::kTopicFieldNumber;
const int ConnectionRequest::kLangFieldNumber;
const int ConnectionRequest::kFormatFieldNumber;
const int ConnectionRequest::kPunctuationFieldNumber;
#endif  // !_MSC_VER

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Jarvis.ConnectionRequest)
}

void ConnectionRequest::InitAsDefaultInstance() {
}

ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Jarvis.ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolversion_ = 1;
  speechkitversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  punctuation_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:Jarvis.ConnectionRequest)
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
  if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete speechkitversion_;
  }
  if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servicename_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apikey_;
  }
  if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete applicationname_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coords_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (this != default_instance_) {
  }
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequest_descriptor_;
}

const ConnectionRequest& ConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectionRequest_2eproto();
  return *default_instance_;
}

ConnectionRequest* ConnectionRequest::default_instance_ = NULL;

ConnectionRequest* ConnectionRequest::New() const {
  return new ConnectionRequest;
}

void ConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    protocolversion_ = 1;
    if (has_speechkitversion()) {
      if (speechkitversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        speechkitversion_->clear();
      }
    }
    if (has_servicename()) {
      if (servicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servicename_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_apikey()) {
      if (apikey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apikey_->clear();
      }
    }
    if (has_applicationname()) {
      if (applicationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        applicationname_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_coords()) {
      if (coords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        coords_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    punctuation_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Jarvis.ConnectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocolVersion = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speechkitVersion;
        break;
      }

      // required string speechkitVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_speechkitVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechkitversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speechkitversion().data(), this->speechkitversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speechkitversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceName;
        break;
      }

      // required string serviceName = 3;
      case 3: {
        if (tag == 26) {
         parse_serviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servicename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // required string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_apiKey;
        break;
      }

      // required string apiKey = 5;
      case 5: {
        if (tag == 42) {
         parse_apiKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apikey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apikey().data(), this->apikey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apikey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_applicationName;
        break;
      }

      // required string applicationName = 6;
      case 6: {
        if (tag == 50) {
         parse_applicationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applicationname().data(), this->applicationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "applicationname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // required string device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_coords;
        break;
      }

      // required string coords = 8;
      case 8: {
        if (tag == 66) {
         parse_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coords().data(), this->coords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "coords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_topic;
        break;
      }

      // required string topic = 9;
      case 9: {
        if (tag == 74) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lang;
        break;
      }

      // required string lang = 10;
      case 10: {
        if (tag == 82) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_format;
        break;
      }

      // required string format = 11;
      case 11: {
        if (tag == 90) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_punctuation;
        break;
      }

      // optional bool punctuation = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_punctuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &punctuation_)));
          set_has_punctuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Jarvis.ConnectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Jarvis.ConnectionRequest)
  return false;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Jarvis.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speechkitversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->speechkitversion(), output);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servicename(), output);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apikey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->apikey(), output);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applicationname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->applicationname(), output);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->coords(), output);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic(), output);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->lang(), output);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->format(), output);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->punctuation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Jarvis.ConnectionRequest)
}

::google::protobuf::uint8* ConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Jarvis.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speechkitversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->speechkitversion(), target);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servicename(), target);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apikey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->apikey(), target);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "applicationname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->applicationname(), target);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "coords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->coords(), target);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic(), target);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lang(), target);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->format(), target);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->punctuation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Jarvis.ConnectionRequest)
  return target;
}

int ConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 protocolVersion = 1 [default = 1];
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // required string speechkitVersion = 2;
    if (has_speechkitversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speechkitversion());
    }

    // required string serviceName = 3;
    if (has_servicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicename());
    }

    // required string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string apiKey = 5;
    if (has_apikey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apikey());
    }

    // required string applicationName = 6;
    if (has_applicationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicationname());
    }

    // required string device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // required string coords = 8;
    if (has_coords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coords());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string topic = 9;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // required string lang = 10;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // required string format = 11;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional bool punctuation = 12 [default = true];
    if (has_punctuation()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_speechkitversion()) {
      set_speechkitversion(from.speechkitversion());
    }
    if (from.has_servicename()) {
      set_servicename(from.servicename());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_apikey()) {
      set_apikey(from.apikey());
    }
    if (from.has_applicationname()) {
      set_applicationname(from.applicationname());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_coords()) {
      set_coords(from.coords());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_punctuation()) {
      set_punctuation(from.punctuation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fe) != 0x000007fe) return false;

  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(speechkitversion_, other->speechkitversion_);
    std::swap(servicename_, other->servicename_);
    std::swap(uuid_, other->uuid_);
    std::swap(apikey_, other->apikey_);
    std::swap(applicationname_, other->applicationname_);
    std::swap(device_, other->device_);
    std::swap(coords_, other->coords_);
    std::swap(topic_, other->topic_);
    std::swap(lang_, other->lang_);
    std::swap(format_, other->format_);
    std::swap(punctuation_, other->punctuation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequest_descriptor_;
  metadata.reflection = ConnectionRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Jarvis

// @@protoc_insertion_point(global_scope)
